{{!-- Character Showcase Styles --}}
<style>
    .character-section {
        min-height: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        position: relative;
    }

    .character-nav {
        display: flex;
        gap: 0.5rem;
        padding: 0.5rem;
    }

    .filterSectionContainer {
        width: fit-content;
        /* Slightly adjusted width to account for the divider */
        display: flex;
        align-items: center;
        justify-content: start;
        flex-direction: column;
        gap: 1rem;
        flex-shrink: 0;
    }

    .filter-section {
        display: flex;
        background-color: rgba(255, 255, 255, 0.2);
        justify-content: space-between;
        flex-direction: column;
        align-items: center;
        margin-bottom: 1rem;
        padding: 1.2rem 1.5rem;
        border-radius: 1.5rem;
    }

    .filter-section .filters {
        display: flex;
        gap: 0.5rem;
    }

    .filter-section p {
        color: black;
        font-size: 1.2rem;
        font-weight: 500;
        margin-bottom: 0;
    }

    .filter-dropdown {
        background-color: #4a2a8a;
        border: none;
        width: 150px;
        border-radius: 0.5rem;
        padding: 0.8rem 1.2rem;
        font-size: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        justify-content: space-between;
    }

    .filter-dropdown-delete {
        background-color: #FF0000;
    }

    .clear-history {
        background-color: #ff3b30;
        color: white;
        border: none;
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        width: auto;
        cursor: pointer;
    }


    .nav-button {
        background: rgba(255, 255, 255, 0.1);
        border: none;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.875rem;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .nav-button:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .hover-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .grid-item:hover .hover-overlay {
        opacity: 1;
    }

    /* Hover content styles */
    .hover-content {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .grid-item:hover .hover-content {
        opacity: 1;
    }

    .text-content {
        margin-top: auto;
        background-color: rgba(0, 0, 0, 0.3);
        padding: 1.5rem;
    }

    .hover-content h3 {
        font-size: 2rem;
        font-weight: bold;
        height: 30px;
        margin-bottom: 1.2rem;
    }

    .hover-content p {
        font-size: 1.4rem;
        line-height: 1.3;
    }

    .hover-buttons {
        display: flex;
        gap: 0.75rem;
        padding: 1rem;
        align-self: flex-end;
    }

    .hover-buttons button {
        background-color: rgba(0, 0, 0, 0.4);
        border: none;
        width: 3.5rem;
        height: 3.5rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .hover-buttons button:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    .hover-buttons img {
        width: 1.2rem;
        height: 1.2rem;
    }

    .expand-btn,
    .download-btn {
        padding: 0rem;
    }

    .character-main {
        background: linear-gradient(180deg, #6248E2 22.26%, #FF6154 100%);
        border-radius: 12px;
        padding: 2rem;
        display: none;
        justify-content: center;
        align-items: center;
        width: 90%;
        height: 40%;
        position: relative;
        margin-inline: auto;
        margin-top: 0;
        transition: all 0.3s ease;
    }

    .character-main.show {
        display: flex;
        margin-top: 2rem;
    }

    .character-image {
        padding-block: 1rem;
        border-radius: 30px;
        height: 100%;
        width: 50%;
        object-fit: contain;
    }

    .character-thumbnails {
        background: linear-gradient(180deg, #6248E2 22.26%, #FF6154 100%);
        border-radius: 12px;
        padding: 1rem;
        width: 90%;
        margin-inline: auto;
        display: none;
        transition: all 0.3s ease;
    }

    .character-thumbnails.show {
        display: block;
        margin-top: 2rem;
    }

    .thumbnail-container {
        padding: 1rem;
        border-radius: 12px;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .character-model-preview {
        background-color: #fff;
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        border-radius: 12px;
        padding: 2rem;
        gap: 1.8rem;
    }

    .thumbnail-wrapper {
        position: relative;
    }

    .thumbnail-actions {
        position: absolute;
        left: 0.5rem;
        top: 0.5rem;
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        z-index: 2;
    }

    .prompt-and-subscription {
        width: 70%;
        margin-inline: auto;
        position: relative;
        box-shadow: 0 0 30px 0 rgba(0, 0, 0, 0.3);
        margin-top: 1.5rem;
        border-radius: 24px;
    }

    .character-prompt-container {
        --border-width: 3px;
        --radius: 24px;
        --angle: 0turn;
        
        position: relative;
        border-radius: var(--radius);
        border: var(--border-width) solid transparent;
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        padding: 2.5rem;
        margin: auto;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
        width: 100%;
        height: 150px;
        isolation: isolate;
    }

    .character-prompt-container::before {
        content: " ";
        position: absolute;
        overflow: hidden;
        inset: calc(var(--border-width) * -1);
        z-index: -1;
        border: inherit;
        border-radius: inherit;
        background-image: conic-gradient(from var(--angle), #381D6A 80%, #E0D1FF 88%, #E0D1FF 92%, #381D6A 100%);
        background-origin: border-box;
        -webkit-mask: linear-gradient(black, black) content-box,
                     linear-gradient(black, black);
        mask: linear-gradient(black, black),
              linear-gradient(black, black);
        -webkit-mask-clip: content-box, border-box;
        mask-clip: content-box, border-box;
        -webkit-mask-composite: xor;
        mask-composite: exclude;
        animation: spin 3s linear infinite;
    }

    .character-prompt-container:hover::before {
        animation-play-state: paused;
    }

    @property --angle {
        syntax: "<angle>";
        inherits: true;
        initial-value: 0turn;
    }

    @keyframes spin {
        to {
            --angle: 1turn;
        }
    }

    @supports not (background: paint(something)) {
        .character-prompt-container::before {
            background-image: conic-gradient(#381D6A 80%, #E0D1FF 88%, #E0D1FF 92%, #381D6A 100%);
        }
    }

    .subscription-container {
        background: rgba(255, 255, 255, 0.08);
        border: 1px solid rgba(255, 255, 255, 0.15);
        border-radius: 16px;
        color: rgba(255, 255, 255, 0.8);
        margin-top: 24px;
        top: 150px;
        width: 180px;
        height: 60px;
        padding: 0.8rem;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 1rem;
        position: absolute;
        right: 0;
        box-shadow: 0 4px 15px rgba(255, 215, 0, 0.1);
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .subscription-container:hover {
        background: rgba(255, 255, 255, 0.12);
        transform: translateY(-2px);
    }

    .subscription-container img {
        width: 42px;
        height: 42px;
        border-radius: 25%;
    }

    .subscription-text {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        padding-left: 0.5rem;
    }

    .subscription-container .title {
        color: gray;
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
        line-height: 1;
        margin-bottom: 0.2rem;
    }

    .subscription-container .subtitle {
        color: #ffffff;
        font-size: 2rem;
        font-weight: 500;
        border-radius: 2rem;
        margin: 0;
        line-height: 1;
    }

    .prompt-input {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        margin-bottom: 1.5rem;
        width: 100%;
        border-radius: 8px;
        padding: 1rem;
    }

    .ai-icon {
        width: 28px;
        height: 28px;
        background-color: #333;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #00ffcc;
        font-weight: bold;
        margin-left: 0%;
        font-size: 12px
    }

    .edit-icon {
        width: 25px;
        height: 25px;
        display: block;
    }

    .prompt-input textarea {
        flex: 1;
        resize: none;
        background: transparent;
        border: none;
        color: white;
        font-size: 1.5rem;
        padding: 0.5rem;
        outline: none;
        min-height: 2.5rem;
        max-height: 6rem;
        overflow-y: auto;
        width: 100%;
        line-height: 1.4;
        transition: all 0.3s ease;
    }

    .prompt-input textarea:focus {
        min-height: 8rem;
    }

    .prompt-input textarea::placeholder {
        color: rgba(255, 255, 255, 0.5);
    }

    .prompt-input::after,
    .prompt-input::before {
        content: none;
    }

    .generate-btn {
        position: absolute;
        right: 1.5rem;
        bottom: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.15);
        border-radius: 16px;
        color: rgba(255, 255, 255, 0.8);
        background: linear-gradient(90deg, #1E0A69 0%, #000000 100%);
        color: #ffffff;
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 4rem;
        padding: 0.5rem 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        width: auto;
        transition: all 0.2s ease;
        font-weight: 500;
        z-index: 2;
    }

    .generate-btn .ai-icon {
        margin-right: 0.5rem;
        /* Adds space between the star and the other content */
    }

    .generate-btn:hover {
        background-color: #3a1a6a;
        color: #ffffff;
    }

    .generate-btn img {
        display: inline-block;
        /* Ensures the image aligns with text */
    }

    .generate-btn .icon {
        font-size: 1 rem
    }

    .character-options {
        display: flex;
        gap: 1rem;
        width: 70%;
        margin-inline: auto;
        margin-top: 2rem;
        margin-bottom: 2rem;
        justify-content: space-between;
    }

    .options-left {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem
    }

    .control-btn {
        background: rgba(255, 255, 255, 0.08);
        border: 1px solid rgba(255, 255, 255, 0.15);
        border-radius: 16px;
        color: rgba(255, 255, 255, 0.8);
        padding: 0.75rem 1.25rem;
        white-space: nowrap;
        font-size: 1.6rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        width: fit-content;
        align-items: center;
        gap: 0.5rem;
        backdrop-filter: blur(10px);
        font-weight: 500;
    }

    .control-btn:hover {
        background: rgba(255, 255, 255, 0.15);
        border-color: rgba(255, 255, 255, 0.3);
        color: white;
        transform: translateY(-2px);
    }

    .control-btn.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-color: transparent;
        color: white;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .control-btn .svg-icon {
        filter: brightness(0) invert(1);
        width: 20px;
        height: 20px;
    }

    .option-btn {
        background-color: white;
        color: #4526B1;
        border: none;
        border-radius: 1rem;
        padding: 1rem 2.2rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        width: auto;
        font-weight: 500;
    }

    .option-btn .icon {
        font-size: 1.2rem;
        color: #555;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 20px;
        height: 20px;
    }

    .option-btn .svg-icon {
        width: 18px;
        height: 18px;
        vertical-align: middle;
    }

    .option-btn.active .svg-icon {
        fill: white;
    }

    .option-btn:not(.active) .svg-icon {
        fill: white;
    }

    .option-btn1 {
        background-color: #4733c1;
        color: #ffffff;
        border: none;
        border-radius: 1rem;
        padding: 1rem 1.2rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        width: auto;
        font-weight: 500;
    }

    .option-btn1 .icon {
        width: 20px;
        height: 20px;
        margin-right: 0.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .action-button {
        background: #ff3b3b;
        color: white;
        border: none;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        cursor: pointer;
        white-space: nowrap;
    }

    .download-button {
        background: #4a90e2;
    }

    .thumbnail {
        height: 100%;
        width: 100%;
        border-radius: 8px;
        object-fit: contain;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .thumbnail.active {
        box-shadow: 0 0 0 2px #6b46c1;
    }

    @media (max-width: 768px) {
        .character-section {
            padding: 0.5rem;
        }

        .character-model-preview {
            display: grid;
            grid-template-columns: repeat(1, 1fr);
            !important
        }

        .character-model-preview video {
            height: 300px;
        }

        .character-image {
            width: 100%;
            border-radius: 20px;
            object-fit: cover;
        }

        .thumbnail-container {
            flex-direction: column;
        }

        .imagination-content {
            margin-block: 3rem;
            bottom: 0;
            left: 0;
        }

        .frog-content {
            width: 90% !important;
            margin-inline: auto;
        }

        .filterSectionContainer {
            width: 100%;
            max-width: 400px;
            margin-bottom: 1.5rem;
            align-items: ;
        }

        .character-main {
            aspect-ratio: 4/3;
        }

        .thumbnail-wrapper {
            width: 100%;
        }

        .prompt-and-subscription {
            flex-direction: column;
            gap: 1rem;
        }

        .subscription-container {
            position: static;
            width: 100%;
            height: auto;
            padding: 1rem;
            margin-top: 1rem;
        }
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
        gap: 2rem;
        padding: 2rem;
        background: rgba(0, 0, 0, 0.1);
        border-radius: 16px;
        backdrop-filter: blur(10px);
    }

    .loading-text {
        text-align: center;
        color: white;
        background: rgba(0, 0, 0, 0.2);
        padding: 1.5rem;
        border-radius: 12px;
        width: 100%;
        max-width: 400px;
    }

    .generating-text {
        font-size: 2rem;
        font-weight: 600;
        margin: 0;
        letter-spacing: 0.5px;
        background: linear-gradient(90deg, #fff, #a78bfa);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .wait-text {
        font-size: 1.6rem;
        opacity: 0.9;
        margin: 0.5rem 0 0 0;
        font-weight: 400;
        color: #e2e8f0;
    }

    /* Preview image styles */
    .preview-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        position: relative;
        padding: 2rem;
        background: rgba(0, 0, 0, 0.1);
        border-radius: 16px;
        backdrop-filter: blur(10px);
    }

    .preview-image-generate {
        width: 256px;
        height: 256px;
        border-radius: 12px;
        object-fit: contain;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    }

    .character-image {
        width: 256px;
        height: 256px;
        border-radius: 12px;
        object-fit: contain;
    }

    .download-button {
        position: absolute;
        top: 2.5rem;
        left: 2.5rem;
        border: none;
        border-radius: 8px;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        z-index: 10;
    }

    .download-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .download-button img {
        width: 24px;
        height: 24px;
    }

    @media (max-width: 768px) {
        .preview-image-generate,
        .character-image {
            width: 200px;
            height: 200px;
        }

        .generating-text {
            font-size: 1.8rem;
        }

        .wait-text {
            font-size: 1.4rem;
        }

        .download-button {
            top: 1.5rem;
            left: 1.5rem;
            width: 36px;
            height: 36px;
        }

        .download-button img {
            width: 20px;
            height: 20px;
        }
    }

    /* Category dropdown styles */
    .category-dropdown {
        position: relative;
        display: inline-block;
    }

    .category-btn {
        background: rgba(255, 255, 255, 0.08);
        border: 1px solid rgba(255, 255, 255, 0.15);
        border-radius: 16px;
        color: rgba(255, 255, 255, 0.8);
        padding: 0.75rem 1.25rem;
        white-space: nowrap;
        font-size: 1.6rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        backdrop-filter: blur(10px);
        font-weight: 500;
    }

    .category-btn:hover {
        background: rgba(255, 255, 255, 0.12);
    }

    .category-btn .icon {
        display: flex;
        align-items: center;
    }

    .category-btn .arrow {
        margin-left: 0.5rem;
        transition: transform 0.3s ease;
    }

    .category-btn.active .arrow {
        transform: rotate(180deg);
    }

    .category-dropdown-content {
        position: absolute;
        top: 100%;
        left: 0;
        background: rgba(30, 30, 30, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        min-width: 200px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        display: none;
        z-index: 1000;
        margin-top: 0.5rem;
        max-height: 300px;
        overflow-y: auto;
    }

    .category-dropdown-content.show {
        display: block;
    }

    .category-item {
        padding: 1rem 1.5rem;
        color: white;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 1.4rem;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .category-item:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .category-item.active {
        background: rgba(98, 72, 226, 0.3);
    }

    .category-item img {
        width: 20px;
        height: 20px;
        object-fit: cover;
        border-radius: 4px;
    }

    .white-icon {
        filter: brightness(0) invert(1);
    }

    @media (max-width: 768px) {
        .category-btn {
            font-size: 1.4rem;
            padding: 0.6rem 1rem;
        }

        .category-item {
            font-size: 1.2rem;
            padding: 0.8rem 1.2rem;
        }
    }
</style>

{{!-- Character Showcase Content --}}
<section id="text-to-image" class="character-section">
    <div class="prompt-and-subscription">
        <div class="character-prompt-container">
            <div class="prompt-input">
                <div class="ai-icon"><img src="/images/svg/AIIcon.svg" alt="AI" width="28" height="28"></div>
                <textarea
                    id="text-to-image-textarea"
                    placeholder="A modern and sleek banner design for UX/UI design, featuring a minimalist layout with ample negative space........."
                    rows="5"></textarea>
            </div>
            <button class="generate-btn" id="generateTextToImageButton">
                <img src="/images/svg/generateIcon.svg" alt="AI" width="24" height="24">
                Generate
            </button>
        </div>
        <div class="subscription-container">
            <img src="/images/generator-images/Subscription Get Pro.png" alt="Golden Crown">
            <div class="subscription-text">
                <p class="title">Subscription</p>
                <p class="subtitle">Get Pro</p>
            </div>
        </div>
    </div>

    <div class="character-options">
        <div class="options-left">
            <div class="category-dropdown" id="categoryDropdown">
                <button class="category-btn" id="categoryBtn" type="button">
                    <span class="icon"><img src="/images/svg/threeDIconBlue.svg" alt="Category" class="svg-icon white-icon"></span>
                    <span class="category-text" data-current-category-id="{{category._id}}">Category</span>
                    <span class="arrow">▼</span>
            </button>
                <div class="category-dropdown-content" id="categoryDropdownContent">
                    <!-- Categories will be populated here -->
                </div>
            </div>
            <button class="control-btn">
                <span class="icon"><img src="/images/svg/screenSizeBlue.svg" alt="Screen Size" class="svg-icon white-icon"></span>
                1:1
            </button>
        </div>
    </div>
    <main class="character-main">
        <div class="loading-container">
            <img src="/images/ai-images-generator/generating.gif" alt="Generating" class="character-image" id="mainTextToImagePreview">
            <div class="loading-text">
                <p class="generating-text">Creating your masterpiece...</p>
                <p class="wait-text">Just a moment while we work our magic</p>
            </div>
        </div>
    </main>

    <div class="character-thumbnails">
        <div class="thumbnail-container">
            <div class="filterSectionContainer">
                <div class="filter-section">
                    <div class="filters">
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="filter-dropdown">
                                All Styles &nbsp;&nbsp;<span>▼</span>
                            </button>
                            <button class="filter-dropdown filter-dropdown-delete">
                                <p style="color: white; font-size: 1.4rem;">Clear History</p>&nbsp;
                                <img style="width: 1.8rem; height: 1.8rem;" src="/images/download.svg" alt="Download">
                            </button>
                        </div>
                    </div>

                </div>
            </div>
            <div class="character-model-preview">
                <div class="thumbnail-wrapper grid-item">
                    <img src="/images/dragon.png" alt="Thumbnail 2" class="thumbnail">
                    <div class="hover-overlay">
                        <div class="hover-content">
                            <div class="hover-buttons">
                                <button class="upsacle-btn">
                                    <img src="/images/expand.svg" alt="Download">
                                </button>
                                <button class="download-btn">
                                    <img src="/images/download.svg" alt="Download">
                                </button>
                                <button class="expand-btn">
                                    <img src="/images/delete.svg" alt="Expand">
                                </button>
                            </div>
                            <div class="text-content">
                                <h3>Lorem ipsum</h3>
                                <p>Lorem ipsum dolor sit amet consectetur. Morbi urna id cursus enim placerat est
                                    ultrices
                                    ornare duis. Molestie eget maecenas gravida aliquam nunc nibh suscipit risus nisi.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="thumbnail-wrapper grid-item">
                    <img src="/images/dragon.png" alt="Thumbnail 2" class="thumbnail">
                    <div class="hover-overlay">
                        <div class="hover-content">
                            <div class="hover-buttons">
                                <button class="upsacle-btn">
                                    <img src="/images/expand.svg" alt="Download">
                                </button>
                                <button class="download-btn">
                                    <img src="/images/download.svg" alt="Download">
                                </button>
                                <button class="expand-btn">
                                    <img src="/images/delete.svg" alt="Expand">
                                </button>
                            </div>
                            <div class="text-content">
                                <h3>Lorem ipsum</h3>
                                <p>Lorem ipsum dolor sit amet consectetur. Morbi urna id cursus enim placerat est
                                    ultrices
                                    ornare duis. Molestie eget maecenas gravida aliquam nunc nibh suscipit risus nisi.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="thumbnail-wrapper grid-item">
                    <img src="/images/dragon.png" alt="Thumbnail 3" class="thumbnail">
                    <div class="hover-overlay">
                        <div class="hover-content">
                            <div class="hover-buttons">
                                <button class="upsacle-btn">
                                    <img src="/images/expand.svg" alt="Download">
                                </button>
                                <button class="download-btn">
                                    <img src="/images/download.svg" alt="Download">
                                </button>
                                <button class="expand-btn">
                                    <img src="/images/delete.svg" alt="Delete">
                                </button>
                            </div>
                            <div class="text-content">
                                <h3>Lorem ipsum</h3>
                                <p>Lorem ipsum dolor sit amet consectetur. Morbi urna id cursus enim placerat est
                                    ultrices
                                    ornare duis. Molestie eget maecenas gravida aliquam nunc nibh suscipit risus nisi.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const generateBtn = document.getElementById('generateTextToImageButton');
        const textarea = document.getElementById('text-to-image-textarea');
        
        // Add textarea animation
        if (textarea) {
            textarea.addEventListener('focus', function() {
                this.style.minHeight = '8rem';
            });

            textarea.addEventListener('blur', function() {
                if (!this.value.trim()) {
                    this.style.minHeight = '2.5rem';
                }
            });

            // Check for stored prompt
            const savedPrompt = localStorage.getItem('selectedPrompt');
            if (savedPrompt) {
                textarea.value = savedPrompt;
                localStorage.removeItem('selectedPrompt');
            }
        }

        // Add generate button functionality
        if (generateBtn) {
            generateBtn.addEventListener('click', async function(e) {
                e.preventDefault();
                try {
                    await handleGenerateTextToImage();
                } catch (error) {
                    console.error('Error in handleGenerateTextToImage:', error);
                }
            });
        }
    });

    async function handleGenerateTextToImage() {
        try {
            const textarea = document.getElementById('text-to-image-textarea');
            if (!textarea) {
                throw new Error('Textarea not found');
            }

            const prompt = textarea.value.trim();
            console.log('Prompt value:', prompt);

            if (prompt !== '') {
                const mainContainer = document.querySelector('.character-main');
                if (!mainContainer) {
                    throw new Error('Main container not found');
                }

                // Show loading state with improved UI
                mainContainer.innerHTML = `
                    <div class="loading-container">
                        <img src="/images/ai-images-generator/generating.gif" alt="Generating" class="character-image" id="mainTextToImagePreview">
                        <div class="loading-text">
                            <p class="generating-text">Creating your masterpiece...</p>
                            <p class="wait-text">Just a moment while we work our magic ✨</p>
                        </div>
                    </div>
                `;
                mainContainer.classList.add('show');

                // Make API request
                const imageResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ prompt: prompt })
                });

                if (!imageResponse.ok) {
                    throw new Error(`Image generation failed with status: ${imageResponse.status}`);
                }

                const imageData = await imageResponse.json();
                const base64Data = imageData.imageData.replace(/^data:image\/\w+;base64,/, '');
                const byteCharacters = atob(base64Data);
                const byteArrays = [];

                for (let i = 0; i < byteCharacters.length; i++) {
                    byteArrays.push(byteCharacters.charCodeAt(i));
                }

                const byteArray = new Uint8Array(byteArrays);
                const blob = new Blob([byteArray], { type: 'image/png' });
                const file = new File([blob], 'generated-image.png', { type: 'image/png' });

                // Upload the generated image
                const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTI5ODM4MCwiZXhwIjoxNzQ1Mzg0NzgwfQ._XjN76nKvPZcxOT8TLWvfdfA-0KzqGjHwnZWX5YdntA";
                const formData = new FormData();
                formData.append('images', file);

                const uploadResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/images', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    body: formData
                });

                if (!uploadResponse.ok) {
                    throw new Error('Failed to upload generated image');
                }

                const uploadResult = await uploadResponse.json();
                
                if (uploadResult && uploadResult.files && uploadResult.files.length > 0) {
                    const imageUrl = uploadResult.files[0].url;
                    
                    mainContainer.innerHTML = `
                        <div class="preview-container">
                            <button class="download-button" data-image-url="${imageUrl}">
                                <img src="/images/download.svg" alt="Download">
                            </button>
                            <img src="${imageUrl}" alt="Generated Image" class="preview-image-generate" id="mainTextToImagePreview">
                        </div>
                    `;
                }
            }
        } catch (error) {
            console.error('Error in handleGenerateTextToImage:', error);
            const mainContainer = document.querySelector('.character-main');
            if (mainContainer) {
                mainContainer.innerHTML = `
                    <div class="loading-container">
                        <div class="loading-text">
                            <p class="generating-text">Oops! Something went wrong</p>
                            <p class="wait-text">Please try again later 🔄</p>
                        </div>
                    </div>
                `;
            }
        }
    }

    // Add download functionality
    async function downloadImage(imageUrl) {
        try {
            const response = await fetch(imageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'generated-image.png';
            document.body.appendChild(link);
            link.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(link);
        } catch (error) {
            console.error('Error downloading image:', error);
        }
    }

    // Add download button click handler
    document.addEventListener('click', async function(e) {
        if (e.target.closest('.download-button')) {
            e.preventDefault();
            const button = e.target.closest('.download-button');
            const imageUrl = button.getAttribute('data-image-url');
            if (imageUrl) {
                await downloadImage(imageUrl);
            }
        }
    });

    // Add category functionality
    async function fetchCategories() {
        try {
            const response = await fetch('https://airbrush-admin-backend.onrender.com/api/categories');
            if (!response.ok) {
                throw new Error('Failed to fetch categories');
            }
            const data = await response.json();
            return data || [];
        } catch (error) {
            console.error('Error fetching categories:', error);
            return [];
        }
    }

    function createCategoryItem(category, currentCategoryId) {
        const item = document.createElement('div');
        item.className = 'category-item';
        if (category._id === currentCategoryId) {
            item.classList.add('active');
        }
        item.setAttribute('data-category-id', category._id);
        item.setAttribute('data-category-slug', category.slug);
        item.innerHTML = `
            ${category.image ? `<img src="${category.image}" alt="${category.name}">` : ''}
            ${category.name}
        `;
        return item;
    }

    // Initialize category dropdown
    document.addEventListener('DOMContentLoaded', async function() {
        const categoryBtn = document.getElementById('categoryBtn');
        const dropdownContent = document.getElementById('categoryDropdownContent');
        const categoryText = categoryBtn.querySelector('.category-text');
        
        // Get current category ID from the data attribute
        const currentCategoryId = categoryText.getAttribute('data-current-category-id');
        console.log('Current category ID:', currentCategoryId);

        // Fetch and populate categories
        const categories = await fetchCategories();
        console.log('Fetched categories:', categories);

        if (categories.length > 0) {
            // Clear existing content
            dropdownContent.innerHTML = '';
            
            // Find current category in the list
            const currentCategory = categories.find(cat => cat._id === currentCategoryId);
            
            // Set initial text if we have a current category
            if (currentCategory) {
                categoryText.textContent = currentCategory.name;
            } else {
                categoryText.textContent = 'Category';
            }

            // Add all categories to dropdown
            categories.forEach(category => {
                const item = createCategoryItem(category, currentCategoryId);
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Store the prompt before redirecting
                    const textarea = document.getElementById('text-to-image-textarea');
                    if (textarea && textarea.value.trim()) {
                        localStorage.setItem('selectedPrompt', textarea.value.trim());
                    }
                    
                    // Update button text
                    categoryText.textContent = category.name;
                    
                    // Update active state
                    dropdownContent.querySelectorAll('.category-item').forEach(item => {
                        item.classList.remove('active');
                    });
                    this.classList.add('active');
                    
                    // Close dropdown
                    dropdownContent.classList.remove('show');
                    categoryBtn.classList.remove('active');

                    // Redirect to the selected category
                    const categorySlug = this.getAttribute('data-category-slug');
                    if (categorySlug) {
                        window.location.href = `/${categorySlug}`;
                    }
                });
                dropdownContent.appendChild(item);
            });
        }

        // Toggle dropdown
        categoryBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Category button clicked');
            this.classList.toggle('active');
            dropdownContent.classList.toggle('show');
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.category-dropdown')) {
                dropdownContent.classList.remove('show');
                categoryBtn.classList.remove('active');
            }
        });
    });

    // Add subscription container click handler
    document.addEventListener('DOMContentLoaded', function() {
        const subscriptionContainer = document.querySelector('.subscription-container');
        if (subscriptionContainer) {
            subscriptionContainer.addEventListener('click', function() {
                const pricingSection = document.getElementById('pricing');
                if (pricingSection) {
                    pricingSection.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        }
    });
</script>
