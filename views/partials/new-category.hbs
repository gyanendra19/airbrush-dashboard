<!-- Add this at the top of the file, after the first script tags -->
<script type="module">
  import { updateRoutes } from '../../server.js';
</script>

<!-- New Category Form -->
<script src="https://unpkg.com/lucide@latest"></script>
<script>
  lucide.createIcons();
</script>
<!-- Add marked library for markdown parsing -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<!-- Add loader HTML -->
<div id="aiGenerationLoader" class="loader-container d-none">
  <div class="loader-content">
    <div class="loader-animation">
      <div class="pulse-ring"></div>
      <div class="icon-container">
        <i class="fas fa-magic"></i>
      </div>
    </div>
    <h4 class="mt-4 text-primary generation-title">Generating AI Content</h4>
    <div class="progress mt-3" style="height: 6px;">
      <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
    </div>
    <p class="text-muted mt-3 mb-0" id="loaderStatus">Initializing...</p>
    <div class="steps-indicator mt-3">
      <div class="step active">
        <div class="step-icon"><i class="fas fa-image"></i></div>
        <span>Hero</span>
      </div>
      <div class="step">
        <div class="step-icon"><i class="fas fa-images"></i></div>
        <span>Gallery</span>
      </div>
      <div class="step">
        <div class="step-icon"><i class="fas fa-lightbulb"></i></div>
        <span>Why use</span>
      </div>
      <div class="step">
        <div class="step-icon"><i class="fas fa-sync"></i></div>
        <span>Text To</span>
      </div>
      <div class="step">
        <div class="step-icon"><i class="fas fa-blog"></i></div>
        <span>Blogs</span>
      </div>
    </div>
  </div>
</div>

<div class="card shadow-sm border-0 mb-4">
  <div class="card-header bg-white py-3">
    <h5 class="card-title mb-0 fw-semibold">Create New Category</h5>
  </div>
  <div class="card-body">
    <form id="newCategoryForm" class="category-needs-validation" novalidate>
      <div class="category-row">
      <div class="mb-3">
        <label for="categoryName" class="form-label">Category Name <span class="text-danger">*</span></label>
        <input type="text" class="form-control" id="categoryName" name="categoryName" 
                 placeholder="Enter category name" required>
          <div class="invalid-feedback">
            Please provide a category name.
          </div>
        </div>

      <div class="mb-3">
        <label for="categorySlug" class="form-label">Category Slug <span class="text-danger">*</span></label>
        <input type="text" class="form-control" id="categorySlug" name="categorySlug" 
                 placeholder="Enter category slug (e.g., my-category)" required>
        <div class="form-text">
          The slug will be used in the URL. Use lowercase letters, numbers, and hyphens only.
          </div>
          <div class="invalid-feedback">
            Please provide a valid category slug.
        </div>
      </div>

      <div class="mb-3">
        <label for="categoryDescription" class="form-label">Description</label>
        <textarea class="form-control" id="categoryDescription" name="categoryDescription" 
                  rows="3" placeholder="Enter category description"></textarea>
        </div>
      </div>

        <div style="display: flex; gap: 20px; margin-top: 20px;" class="mb-3">
          <div>
        <label for="categoryImage" class="form-label">Category Image <span class="text-danger">*</span></label>
        <input type="file" class="form-control" id="categoryImage" name="categoryImage" 
        accept="image/*" required />
            <div class="invalid-feedback">
              Please select a category image.
            </div>
            </div>
        <div class="image-preview bg-light rounded overflow-hidden mt-2" style="width: 200px; height: 200px;">
            <div class="d-flex align-items-center justify-content-center text-muted h-100">
            <i class="bi bi-image me-2"></i> 
            <i data-lucide="image" class="me-2"></i>
            No image selected
          </div>
        </div>
      </div>
      
      
      <div style="margin-top: 40px;" class="d-grid gap-2">
        <button type="submit" class="btn btn-primary catgoey-btn">
          <i class="bi bi-plus-circle me-2"></i>
          <i data-lucide="plus-circle" class="me-2"></i>
          Create Category
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Hero Section Form -->
<div class="card shadow-sm border-0 mb-4 d-none" id="heroSectionForm">
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
          <h5 class="card-title mb-0 fw-semibold">Hero Section</h5>
          <span class="badge bg-primary">Required</span>
        </div>
        <div class="card-body">
    <form id="heroForm" class="needs-validation" novalidate>
            <input type="hidden" id="categoryId" name="categoryId">
            <input type="hidden" id="sectionType" name="sectionType" value="hero-section">
            
            <div class="mb-3">
              <label for="heroTitle" class="form-label">Title</label>
              <input type="text" class="form-control" id="heroTitle" name="title" 
                    placeholder="Enter hero section title" required>
              <div class="invalid-feedback">
                Please provide a title.
              </div>
            </div>
            
            <div class="mb-3">
              <label for="heroDescription" class="form-label">Description</label>
              <textarea class="form-control" id="heroDescription" name="description" 
                       rows="3" placeholder="Enter description" required></textarea>
              <div class="invalid-feedback">
                Please provide a description.
              </div>
            </div>
            
            <div class="mb-3">
              <label for="heroImage" class="form-label">Background Image</label>
              <input type="file" class="form-control" id="heroImage" name="image" accept="image/*" required>
              <div class="form-text">
                Recommended size: 1920x1080px. Max file size: 2MB.
              </div>
              <div class="invalid-feedback">
                Please select an image.
              </div>
              <div class="image-preview bg-light rounded overflow-hidden mt-2" style="width: 200px; height: 150px;">
                <div class="d-flex align-items-center justify-content-center text-muted h-100">
                  <i class="bi bi-image me-2"></i> No image selected
                </div>
              </div>
            </div>
            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary">
                <i class="bi bi-save me-2"></i> Save Hero Section
              </button>
            </div>
          </form>
  </div>
</div>

<!-- Add alert container at the end of the body -->
<div class="alert-container position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
  <div id="categorySuccessAlert" class="alert alert-success d-flex align-items-center mb-0 d-none">
    <i class="bi bi-check-circle-fill me-2"></i>
    <div>
      <strong>Category created successfully!</strong>
    </div>
  </div>
</div>

<style>
  /* Alert container styles */
  .alert-container {
    min-width: 300px;
    max-width: 500px;
  }

  .alert-container .alert {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    border: none;
    animation: slideIn 0.3s ease-out;
    margin-bottom: 0;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Add styles for Lucide icons */
  [data-lucide] {
    width: 1em;
    height: 1em;
    stroke-width: 1.5;
    vertical-align: -0.125em;
  }

  /* Loader styles */
  .loader-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.95);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    backdrop-filter: blur(5px);
  }

  .loader-content {
    text-align: center;
    padding: 2.5rem;
    background-color: white;
    border-radius: 1.5rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    min-width: 320px;
    max-width: 90%;
    width: 480px;
  }

  .loader-animation {
    position: relative;
    width: 80px;
    height: 80px;
    margin: 0 auto;
  }

  .pulse-ring {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    border: 3px solid var(--bs-primary);
    opacity: 0;
    animation: pulse 2s ease-out infinite;
  }

  .icon-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 50px;
    height: 50px;
    background: var(--bs-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .icon-container i {
    color: white;
    font-size: 24px;
    animation: bounce 1s ease infinite;
  }

  .generation-title {
    font-weight: 600;
    background: linear-gradient(45deg, var(--bs-primary), #4a90e2);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 0;
  }

  .progress {
    background-color: rgba(var(--bs-primary-rgb), 0.1);
    border-radius: 10px;
    overflow: hidden;
  }

  .steps-indicator {
    display: flex;
    justify-content: space-between;
    margin-top: 1.5rem;
    padding: 0 1rem;
  }

  .step {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    opacity: 0.5;
    transition: opacity 0.3s ease;
  }

  .step.active {
    opacity: 1;
  }

  .step.completed {
    opacity: 1;
    color: var(--bs-primary);
  }

  .step-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .step.active .step-icon {
    background: var(--bs-primary);
    color: white;
    transform: scale(1.1);
  }

  .step.completed .step-icon {
    background: var(--bs-primary);
    color: white;
  }

  @keyframes pulse {
    0% {
      transform: scale(0.8);
      opacity: 0.5;
    }
    100% {
      transform: scale(1.5);
      opacity: 0;
    }
  }

  @keyframes bounce {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-5px);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 576px) {
    .loader-content {
      padding: 1.5rem;
      width: 90%;
    }

    .steps-indicator {
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
    }

    .step {
      flex: 0 0 auto;
      width: 60px;
    }
  }
</style>

<script>
  
  document.addEventListener('DOMContentLoaded', function() {
    const categoryForm = document.getElementById('newCategoryForm');
    const heroSectionForm = document.getElementById('heroSectionForm');
    const heroForm = document.getElementById('heroForm');
    const categoryImageInput = document.getElementById('categoryImage');
    const categoryImagePreview = document.querySelector('.image-preview');
    const heroImageInput = document.getElementById('heroImage');
    const heroImagePreview = document.querySelector('#heroSectionForm .image-preview');
        // Define token once at the top level
    const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTI5ODM4MCwiZXhwIjoxNzQ1Mzg0NzgwfQ._XjN76nKvPZcxOT8TLWvfdfA-0KzqGjHwnZWX5YdntA";

    const showAlert = (message, type = 'success') => {
        // Create alert container if it doesn't exist
        let alertContainer = document.querySelector('.alert-container');
        if (!alertContainer) {
          alertContainer = document.createElement('div');
          alertContainer.className = 'alert-container';
          document.body.appendChild(alertContainer);
        }

        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show py-2 px-3 mb-2`;
        alertDiv.style.fontSize = '0.875rem';
        alertDiv.innerHTML = `
          <strong>${type === 'success' ? 'Success!' : type === 'danger' ? 'Error!' : 'Note:'}</strong> ${message}
          <button type="button" class="btn-close btn-close-sm" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        // Add alert to the container
        alertContainer.appendChild(alertDiv);
        
        // Remove alert after 4 seconds
        setTimeout(() => {
          alertDiv.classList.add('fade');
          setTimeout(() => {
            alertDiv.remove();
            // Remove container if it's empty
            if (alertContainer.children.length === 0) {
              alertContainer.remove();
            }
          }, 300);
        }, 4000);
      };

    // Handle category image preview
    if (categoryImageInput && categoryImagePreview) {
      categoryImageInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
            if (file) {
              const objectUrl = URL.createObjectURL(file);
          categoryImagePreview.innerHTML = `
            <img src="${objectUrl}" class="w-100 h-100 object-fit-contain" alt="Category Preview">
          `;
          categoryImageInput.addEventListener('change', function() {
            URL.revokeObjectURL(objectUrl);
          });
        } else {
          categoryImagePreview.innerHTML = `
                  <div class="d-flex align-items-center justify-content-center text-muted h-100">
                    <i class="bi bi-image me-2"></i> 
                    <i data-lucide="image" class="me-2"></i>
                    No image selected
                  </div>
                `;
        }
      });
    }

    // Handle hero image preview
    if (heroImageInput && heroImagePreview) {
      heroImageInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
            if (file) {
              const objectUrl = URL.createObjectURL(file);
          heroImagePreview.innerHTML = `
            <img src="${objectUrl}" class="w-100 h-100 object-fit-contain" alt="Hero Preview">
          `;
          heroImageInput.addEventListener('change', function() {
            URL.revokeObjectURL(objectUrl);
          });
        } else {
          heroImagePreview.innerHTML = `
              <div class="d-flex align-items-center justify-content-center text-muted h-100">
                <i class="bi bi-image me-2"></i> No image selected
              </div>
            `;
        }
      });
    }

    // Handle category form submission
    categoryForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      if (!this.checkValidity()) {
        this.classList.add('was-validated');
        return;
      }
      
      const submitBtn = this.querySelector('button[type="submit"]');
      const originalBtnText = submitBtn.innerHTML;
      submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';
      submitBtn.disabled = true;
      
      try {
        // Get form data
        const formData = new FormData(this);
        const categoryName = formData.get('categoryName');
        const categorySlug = formData.get('categorySlug') || categoryName.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
        const categoryDescription = formData.get('categoryDescription');
        let metaTags
        // Generate metatags using the prompt API before creating the category
        console.log('Generating metatags for category...');
        let metatags = [];
        try {
          const promptResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-prompt', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              categoryName: categoryName,
              type: 'meta',
            })
          });

          if (promptResponse.ok) {
            const promptData = await promptResponse.json();
            console.log('Metatags generated:', promptData);
            
            try {
              metaTags = promptData.prompt.candidates[0].content.parts[0].text;
              // Clean up the text and split into array
            } catch (error) {
              console.error(`Error parsing metatags: ${error.message}`);
            }
          } else {
            console.warn('Failed to generate metatags, continuing without them');
          }
        } catch (error) {
          console.warn('Error generating metatags:', error);
        }
        
        const categoryData = {
          name: categoryName,
          slug: categorySlug,
          description: categoryDescription,
          metaTags: metaTags || '', // Add the generated metatags to category data
          isActive: true
        };
        
        // Upload category image
        const categoryImage = formData.get('categoryImage');
        if (!categoryImage) {
          throw new Error('Please select a category image');
        }

        // Validate image file
        if (!categoryImage.type.startsWith('image/')) {
          throw new Error('Please select a valid image file');
        }

        // Check file size (max 2MB)
        const maxSize = 2 * 1024 * 1024; // 2MB in bytes
        if (categoryImage.size > maxSize) {
          throw new Error('Image size should be less than 2MB');
        }


        console.log('Uploading category image...');
        const imageUrl = await uploadImage(categoryImage, token);
        if (!imageUrl) {
          throw new Error('Failed to upload category image');
        }
        console.log('Category image uploaded:', imageUrl);
        
        // Add image URL to category data
        categoryData.image = imageUrl;

        // Create category
        console.log('Creating category with data:', categoryData);
        const response = await fetch('https://airbrush-admin-backend.onrender.com/api/categories', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(categoryData)
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => response.text());
          throw new Error(typeof errorData === 'string' ? errorData : errorData.message || 'Failed to create category');
        }
        
        const result = await response.json();
        console.log('Category created:', result);
            
        if (!result._id) {
          throw new Error('Category created but no ID returned');
        }

        // Show initial success message
        showAlert('Category created! Starting AI image generation...', 'success');

        // Start AI image generation and wait for it to complete
        await generateImageAndContent('', categoryName, categoryDescription, result._id);
        
        // Add a small delay to ensure all content is properly saved
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Validate content count after generation is complete
        const isValid = await validateCategoryContent(result._id);
        
        if (!isValid) {
          // Category and its content were deleted, show appropriate message
          showAlert('Category was removed due to invalid content/section count', 'warning');
          return;
        }

        // If we get here, the category is valid
        showAlert('Category created and validated successfully!', 'success');

        // Update routes after successful category creation and validation
        try {
          const routeResult = await updateRoutes();
          if (routeResult.success) {
            console.log('Routes updated successfully:', routeResult.message);
          } else {
            console.warn('Routes update warning:', routeResult.message);
          }
        } catch (error) {
          console.warn('Routes update warning:', error);
        }
            
        // Reset form
        this.reset();
        this.classList.remove('was-validated');
        const previewContainer = document.querySelector('.image-preview');
        if (previewContainer) {
          previewContainer.innerHTML = `
            <div class="d-flex align-items-center justify-content-center text-muted h-100">
              <i class="bi bi-image me-2"></i> 
              <i data-lucide="image" class="me-2"></i>
              No image selected
            </div>
          `;
        }
        
      } catch (error) {
        console.error('Error creating category:', error);
        showErrorAlert(error);
      } finally {
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
      }
    });

    // Add this function after the uploadImage function
    async function validateCategoryContent(categoryId) {
      try {
        // Fetch all sections for this category
        const sectionsResponse = await fetch(`https://airbrush-admin-backend.onrender.com/api/sections/category/${categoryId}`);
        
        if (!sectionsResponse.ok) {
          throw new Error('Failed to fetch category sections');
        }
        
        const data = await sectionsResponse.json();
        console.log(data, 'sections data');
        
        // Fetch all content for this category
        const contentResponse = await fetch(`https://airbrush-admin-backend.onrender.com/api/content/category/${categoryId}`);
        
        if (!contentResponse.ok) {
          throw new Error('Failed to fetch category content');
        }
        
        const contents = await contentResponse.json();

        // Helper function to clean up category and its data
        async function cleanupCategory(reason) {
          console.log(`Cleaning up category ${categoryId}: ${reason}`);
          
          // Delete all sections first
          for (const section of data.sections) {
            try {
              const deleteSectionResponse = await fetch(`https://airbrush-admin-backend.onrender.com/api/sections/${section._id}`, {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              
              if (!deleteSectionResponse.ok) {
                console.error(`Failed to delete section ${section._id}`);
              } else {
                console.log(`Deleted section ${section._id}`);
              }
            } catch (error) {
              console.error(`Error deleting section ${section._id}:`, error);
            }
          }

          // Then delete all content
          for (const content of contents) {
            try {
              const deleteContentResponse = await fetch(`https://airbrush-admin-backend.onrender.com/api/content/${content._id}`, {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              
              if (!deleteContentResponse.ok) {
                console.error(`Failed to delete content ${content._id}`);
              } else {
                console.log(`Deleted content ${content._id}`);
              }
            } catch (error) {
              console.error(`Error deleting content ${content._id}:`, error);
            }
          }
          
          // Finally delete the category
          const deleteCategoryResponse = await fetch(`https://airbrush-admin-backend.onrender.com/api/categories/${categoryId}`, {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (!deleteCategoryResponse.ok) {
            throw new Error('Failed to delete category');
          }
          
          showAlert(reason, 'warning');
          return false;
        }
        
        // Check if there are exactly 6 sections and 6 contents
        if (data.sections.length !== 6 || contents.length !== 6) {
          return await cleanupCategory(
            `Category and all its content deleted because it didn't have all sections and contents (had ${data.sections.length} sections and ${contents.length} contents)`
          );
        }
        
        // Verify that all required section types exist
        const requiredSections = [
          'Hero Section',
          'Images Gallery',
          'Why Use tool',
          'Text to Anything',
          'Transform Grid',
          'Blogs'
        ];
        
        const missingSections = requiredSections.filter(required => 
          !data.sections.some(section => section.name === required)
        );
        
        if (missingSections.length > 0) {
          return await cleanupCategory(
            `Category and all its content deleted because it was missing required sections: ${missingSections.join(', ')}`
          );
        }
        
        return true;
      } catch (error) {
        console.error('Error validating category content:', error);
        showAlert('Error validating category content: ' + error.message, 'danger');
        return false;
      }
    }

    // Helper function to upload images
    async function uploadImage(file, token) {
      if (!file) return null;

      try {
        console.log('Starting image upload...');
        const formData = new FormData();
        formData.append('images', file);

        const response = await fetch('https://airbrush-admin-backend.onrender.com/api/images', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.error('Image upload failed:', errorText);
          throw new Error(`Failed to upload image: ${errorText}`);
        }

        const result = await response.json();
        console.log('Image upload response:', result);
        
        if (!result || !result.files || !result.files[0]) {
          throw new Error('Invalid image upload response format');
        }

        return result.files[0].url;
      } catch (error) {
        console.error('Error uploading image:', error);
        throw error;
      }
    }

    // Helper function to show error alerts
    function showErrorAlert(error) {
      const errorAlert = document.createElement('div');
      errorAlert.className = 'alert alert-danger d-flex align-items-center mb-0';
      errorAlert.innerHTML = `
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <div>
          <strong>Error!</strong>
          <p class="mb-0">${error.message}</p>
            </div>
          `;
          
          const alertContainer = document.querySelector('.alert-container');
          if (alertContainer) {
        alertContainer.appendChild(errorAlert);
            setTimeout(() => {
          errorAlert.remove();
        }, 5000);
      }
    }

    // Add AI image generation function
    async function generateImageAndContent(prompt, categoryName, categoryDescription, categoryId) {
      if (!categoryId) {
        showAlert('Category ID is missing', 'warning');
        return;
      }

      if (!categoryName) {
        showAlert('Category name is missing', 'warning');
        return;
      }

      // Show loader
      const loader = document.getElementById('aiGenerationLoader');
      const loaderStatus = document.getElementById('loaderStatus');
      const progressBar = loader.querySelector('.progress-bar');
      const steps = loader.querySelectorAll('.step');
      loader.classList.remove('d-none');

      function updateProgress(sectionIndex, subProgress = 0) {
        const totalSections = 5;
        const progressPerSection = 100 / totalSections;
        const progress = (sectionIndex * progressPerSection) + (subProgress * progressPerSection);
        progressBar.style.width = `${progress}%`;
        
        // Update steps
        steps.forEach((step, index) => {
          if (index < sectionIndex) {
            step.classList.remove('active');
            step.classList.add('completed');
          } else if (index === sectionIndex) {
            step.classList.add('active');
            step.classList.remove('completed');
          } else {
            step.classList.remove('active', 'completed');
          }
        });
      }

      try {
        // Define sections with their specific prompts
        const sections = [
          {
            name: 'Hero Section',
            slug: 'hero-section',
            description: 'Hero section for the category',
            order: 1,
            promptTemplate: `Create a hero section image for ${categoryName}.
              Context: ${categoryDescription}.`
          },
          {
            name: 'Images Gallery',
            slug: 'images-gallery',
            description: 'Showcase of images and examples',
            order: 2,
            promptTemplate: `Create a gallery showcase image for ${categoryName}.
              Context: ${categoryDescription}.`
          },
          {
            name: `Why Use tool`,
            slug: 'why-use-tool',
            description: 'Benefits and features section',
            order: 3,
            promptTemplate: `Create an image highlighting why users should use ${categoryName}.
              Context: ${categoryDescription}`
          },
          {
            name: `Text to Anything`,
            slug: 'text-to-anything',
            description: 'Text to specific output conversion capabilities',
            order: 4,
            promptTemplate: `Create an image demonstrating text-to-${categoryName.toLowerCase()} transformation.
              Context: ${categoryDescription}`
          },
          {
            name: `Transform Grid`,
            slug: 'transform-grid',
            description: 'Transform grid section',
            order: 5,
            promptTemplate: `Create an image demonstrating text-to-${categoryName.toLowerCase()} transformation.
              Context: ${categoryDescription}`
          },
          {
            name: 'Blogs',
            slug: 'blogs',
            description: 'Blog posts and articles section',
            order: 6,
            promptTemplate: `Create a blog section image for ${categoryName}.
              Context: ${categoryDescription}`
          }
        ];

        // Process all sections in parallel
        let contentDataArray = [];
        let blogDataArray = [];
        let transformGridDataArray = [];
        const sectionPromises = sections.map(async (section, sectionIndex) => {
          try {
            console.log(`Processing ${section.name}...`);
            loaderStatus.textContent = `Generating content for ${section.name}...`;
            updateProgress(sectionIndex);

            if(section.name === 'Images Gallery') {
              loaderStatus.textContent = `Generating gallery images (this may take a few minutes)...`;

              // Generate all prompts in parallel
              const promptPromises = Array(20).fill().map(() => 
                fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-prompt', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    categoryName: categoryName,
                    type: 'prompt'
                  })
                }).then(res => {
                  if (!res.ok) throw new Error('Prompt generation failed');
                  return res.json();
                })
              );

              const promptResults = await Promise.all(promptPromises);
              loaderStatus.textContent = 'Generating images...';
              updateProgress(sectionIndex, 0.4);

              // Extract all prompts
              const prompts = promptResults.map(data => {
                let promptText = data.prompt.candidates[0].content.parts[0].text;
                // Remove asterisks from the prompt
                promptText = promptText.replace(/\*/g, '');
                return promptText.trim();
              });

              // Generate all images in parallel
              const imagePromises = prompts.map(promptText =>
                fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-image', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    prompt: promptText
                  })
                }).then(res => {
                  if (!res.ok) throw new Error('Image generation failed');
                  return res.json();
                })
              );

              const imageResults = await Promise.all(imagePromises);
              loaderStatus.textContent = 'Processing generated images...';
              updateProgress(sectionIndex, 0.8);

              // Process all images
              const processedImages = await Promise.all(imageResults.map(async (data, index) => {
                // Extract the base64 data - remove the prefix if it exists
                const base64Data = data.imageData.replace(/^data:image\/\w+;base64,/, '');
                const byteCharacters = atob(base64Data);
                const byteArrays = [];
                
                for (let i = 0; i < byteCharacters.length; i++) {
                  byteArrays.push(byteCharacters.charCodeAt(i));
                }
                
                const byteArray = new Uint8Array(byteArrays);
                const blob = new Blob([byteArray], { type: 'image/png' });
                const file = new File([blob], `ai-generated-image-${index + 1}.png`, { type: 'image/png' });
                
                const formData = new FormData();
                formData.append('images', file);
                
                const uploadResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/images', {
                  method: 'POST',
                  body: formData
                });

                if (!uploadResponse.ok) throw new Error('Upload failed');
                return uploadResponse.json();
              }));

              loaderStatus.textContent = 'Finalizing...';
              updateProgress(sectionIndex, 1);

              // Add all processed images to the gallery with their prompts
              const galleryImages = [];
              processedImages.forEach((uploadData, index) => {
                if (uploadData.files && uploadData.files.length > 0) {
                  galleryImages.push({
                    url: uploadData.files[0].url,
                    alt: "Gallery image",
                    prompt: prompts[index],
                    width: 1200,
                    height: 800,
                    order: index + 1
                  });
                }
              });

              contentDataArray.push({
                section: 'Images Gallery',
                slug: `${section.slug}`,
                title: `Image Gallery`,
                subtitle: `Beautiful ${categoryName} images`,
                images: galleryImages
              });
            }

            if(section.name === 'Blogs') {
              loaderStatus.textContent = `Generating blog content (this may take a few minutes)...`;
              updateProgress(sectionIndex, 0.2);

              // Generate all prompts and content in parallel
              const blogPromises = Array(4).fill().map(() => 
                Promise.all([
                  // Generate image prompt
                  fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-prompt', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      categoryName: categoryName,
                      type: 'prompt'
                    })
                  }).then(res => {
                    if (!res.ok) throw new Error('Prompt generation failed');
                    return res.json();
                  }),
                  // Generate blog content
                  fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-prompt', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      categoryName: categoryName,
                      type: 'content'
                    })
                  }).then(res => {
                    if (!res.ok) throw new Error('Content generation failed');
                    return res.json();
                  })
                ])  
              );

              const blogResults = await Promise.all(blogPromises);
              loaderStatus.textContent = 'Generating blog images...';
              updateProgress(sectionIndex, 0.4);

              // Extract prompts and content
              const promptsAndContent = blogResults.map(([promptData, contentData]) => ({
                prompt: promptData.prompt.candidates[0].content.parts[0].text,
                content: contentData.prompt.candidates[0].content.parts[0].text
              }));

              // Generate all images in parallel
              const imagePromises = promptsAndContent.map(({ prompt }) =>
                fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-image', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    prompt: prompt
                  })
                }).then(res => {
                  if (!res.ok) throw new Error('Image generation failed');
                  return res.json();
                })
              );

              const imageResults = await Promise.all(imagePromises);
              loaderStatus.textContent = 'Processing blog images...';
              updateProgress(sectionIndex, 0.6);

              // Process all images in parallel
              const processedImages = await Promise.all(imageResults.map(async (imageData, index) => {
                // Extract the base64 data - remove the prefix if it exists
                const base64Data = imageData.imageData.replace(/^data:image\/\w+;base64,/, '');
                const byteCharacters = atob(base64Data);
                const byteArrays = [];

                for (let j = 0; j < byteCharacters.length; j++) {
                  byteArrays.push(byteCharacters.charCodeAt(j));
                }

                const byteArray = new Uint8Array(byteArrays);
                const blob = new Blob([byteArray], { type: 'image/png' });
                const file = new File([blob], `${section.slug}-${index + 1}.png`, { type: 'image/png' });
                
                return uploadImage(file, token);
              }));

              loaderStatus.textContent = 'Finalizing blog content...';
              updateProgress(sectionIndex, 0.8);

              // Create the content object with all blog posts
              blogDataArray.push({
                section: 'Blogs',
                slug: `${section.slug}`,
                title: 'Blog Section', // Extract first line as title
                subtitle: `Beautiful ${categoryName} blogs`,
                images: processedImages.map((imageUrl, index) => ({
                  url: imageUrl,
                  title: promptsAndContent[index].content.split('\n')[0],
                  content: promptsAndContent[index].content,
                  prompt: promptsAndContent[index].prompt,
                  alt: `Beautiful ${categoryName} image ${index + 1}`,
                  width: 1024,
                  height: 1024
                }))
              });

              updateProgress(sectionIndex, 1);
            }

            if(section.name === 'Transform Grid') {
              loaderStatus.textContent = `Generating transform grid content...`;
              updateProgress(sectionIndex, 0.2);

              // Generate content for 6 items (2 rows of 3 items each)
              const gridPromises = Array(3).fill().map(() => 
                Promise.all([
                  // Generate image prompt
                  fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-prompt', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      categoryName: categoryName,
                      type: 'prompt'
                    })
                  }).then(res => {
                    if (!res.ok) throw new Error('Prompt generation failed');
                    return res.json();
                  }),
                  // Generate content (70-100 words)
                  fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-prompt', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      categoryName: categoryName,
                      type: 'short_content',
                    })
                  }).then(res => {
                    if (!res.ok) throw new Error('Content generation failed');
                    return res.json();
                  })
                ]).catch(error => {
                  console.error('Error in grid item generation:', error);
                  return [
                    { prompt: { candidates: [{ content: { parts: [{ text: 'Default prompt' }] } }] } },
                    { prompt: { candidates: [{ content: { parts: [{ text: 'Default content' }] } }] } }
                  ];
                })  
              );

              const gridResults = await Promise.all(gridPromises);
              loaderStatus.textContent = 'Generating transform grid images...';
              updateProgress(sectionIndex, 0.4);

              // Extract prompts and content
              const gridItems = gridResults.map(([promptData, contentData]) => {
                try {
                  return {
                    prompt: promptData.prompt.candidates[0].content.parts[0].text,
                    title: 'Transform Grid Test Title',
                    content: contentData.prompt.candidates[0].content.parts[0].text
                  };
                } catch (error) {
                  console.error('Error extracting prompt/content:', error);
                  return {
                    prompt: 'Default prompt',
                    title: 'Transform Grid Test Title',
                    content: 'Default content'
                  };
                }
              });

              // Generate all images in parallel
              const imagePromises = gridItems.map(({ prompt }) =>
                fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-image', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    prompt: prompt
                  })
                }).then(res => {
                  if (!res.ok) throw new Error('Image generation failed');
                  return res.json();
                }).catch(error => {
                  console.error('Error generating image:', error);
                  return { imageData: null };
                })
              );

              const imageResults = await Promise.all(imagePromises);
              loaderStatus.textContent = 'Processing transform grid images...';
              updateProgress(sectionIndex, 0.6);

              // Process all images in parallel
              const processedImages = await Promise.all(imageResults.map(async (imageData, index) => {
                try {
                  if (!imageData || !imageData.imageData) {
                    console.error(`No image data for index ${index}`);
                    return '/images/placeholder.png';
                  }

                  // Extract the base64 data - remove the prefix if it exists
                  const base64Data = imageData.imageData.replace(/^data:image\/\w+;base64,/, '');
                  const byteCharacters = atob(base64Data);
                  const byteArrays = [];

                  for (let j = 0; j < byteCharacters.length; j++) {
                    byteArrays.push(byteCharacters.charCodeAt(j));
                  }

                  const byteArray = new Uint8Array(byteArrays);
                  const blob = new Blob([byteArray], { type: 'image/png' });
                  const file = new File([blob], `transform-grid-${index + 1}.png`, { type: 'image/png' });
                  
                  return uploadImage(file, token);
                } catch (error) {
                  console.error(`Error processing image ${index}:`, error);
                  return '/images/placeholder.png';
                }
              }));

              loaderStatus.textContent = 'Finalizing transform grid content...';
              updateProgress(sectionIndex, 0.8);

              console.log(processedImages, 'processedImages');
              
              // Create grid fields array with processed data
              const gridFields = processedImages.map((url, index) => ({
                id: `grid-${index + 1}`,
                url: url,
                title: gridItems[index].title || 'Transform Grid Test Title',
                content: gridItems[index].content
              }));
 
              // Push the new grid fields to transformGridDataArray
              transformGridDataArray.push({
                section: 'Transform Grid',
                slug: section.slug,
                title: section.name,
                subtitle: `Transform ${categoryName} grid`,
                images: [],
                fields: gridFields.map(field => ({
                  value: {
                    type: 'grid',
                    key: field.id,
                    url: field.url,
                    title: field.title,
                    content: field.content
                  }
                }))
              });
            }

            let mainImageUrl = '';
            if(section.name === 'Hero Section' || section.name === 'Text to Anything' || section.name === 'Why Use tool') {
              const imageResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-image', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  prompt: section.promptTemplate
                })
              });

              if (!imageResponse.ok) {
                throw new Error('Image generation failed');
              }

              const imageData = await imageResponse.json();
              // Extract the base64 data - remove the prefix if it exists
              const base64Data = imageData.imageData.replace(/^data:image\/\w+;base64,/, '');
              const byteCharacters = atob(base64Data);
              const byteArrays = [];

              for (let j = 0; j < byteCharacters.length; j++) {   
                byteArrays.push(byteCharacters.charCodeAt(j));
              }

              const byteArray = new Uint8Array(byteArrays);
              const blob = new Blob([byteArray], { type: 'image/png' });
              
              const file = new File([blob], `${section.slug}.png`, { type: 'image/png' });
              
              // Upload the generated image
              mainImageUrl = await uploadImage(file, token);
            }
              
            // Generate title and description for the section
            let generatedTitle = section.name;
            let generatedDescription = section.description;
            
            // All sections get description generation (no title generation)
            if(section.name === 'Hero Section' || section.name === 'Text to Anything' || section.name === 'Why Use tool') {
              console.log(`Generating description for ${section.name}...`);
              const promptResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/images/generate-prompt', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  categoryName: categoryName,
                  type: 'description',
                  prompt: `Generate a concise description (10-15 words) for the "${section.name}" section of a ${categoryName} category. 
                  Context: ${categoryDescription}.
                  The description should be engaging and highlight the key value of this section.`
                })
              });

              if (!promptResponse.ok) {
                throw new Error(`Failed to generate description for ${section.name}`);
              }

              const promptData = await promptResponse.json();
              console.log(`Description generated for ${section.name}:`, promptData);
              
              try {
                const textContent = promptData.prompt.candidates[0].content.parts[0].text;
                // Clean up the text (remove quotes, etc)
                generatedDescription = textContent.replace(/^["']|["']$/g, '').trim();
                
                // Ensure description is not too long (10-15 words)
                const words = generatedDescription.split(/\s+/);
                if (words.length > 15) {
                  generatedDescription = words.slice(0, 15).join(' ');
                }
              } catch (error) {
                console.error(`Error parsing description: ${error.message}`);
              }
            }
            
            // Create section
            console.log(`Creating section for ${section.name}...`);
            const sectionResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/sections', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              },
              body: JSON.stringify({
                name: section.name,
                slug: section.slug,
                description: section.description,
                category: categoryId,
                isFolder: false,
                order: section.order,
                isActive: true
              })
            });

            if (!sectionResponse.ok) {
              throw new Error(`Failed to create section for ${section.name}`);
            }

            const sectionResult = await sectionResponse.json();
            console.log(`Section created for ${section.name}:`, sectionResult);

            let contentData;
            if(section.name === 'Images Gallery') {
              contentData = {
                section: sectionResult._id,
                slug: section.slug,
                title: section.name,
                subtitle: section.description,
                images: contentDataArray[contentDataArray.length - 1]?.images,
                fields: [],
                isActive: true
              }
            } else if(section.name === 'Blogs') {
              const blogImages = blogDataArray[blogDataArray.length - 1]?.images || [];
              
              // Configure marked to allow HTML
              marked.setOptions({
                sanitize: false,  // Allow HTML in the input
                gfm: true,        // GitHub Flavored Markdown
                breaks: true      // Convert line breaks to <br>
              });
              
              // Parse content with marked before creating fields
              const fields = blogImages.map(image => {
                // Parse the blog content from markdown to HTML
                const parsedContent = marked.parse(image.content || '');
                console.log('Original content:', image.content);
                
                return {
                  value: {
                    url: image.url,
                    title: image.title,
                    content: parsedContent
                  }
                };
              }); 
              
              contentData = {
                section: sectionResult._id,
                slug: section.slug,
                title: section.name,
                subtitle: generatedDescription || 'No description',
                images: [],
                fields: fields,
                isActive: true
              }
            } else if(section.name === 'Transform Grid') {
              const gridFields = transformGridDataArray[transformGridDataArray.length - 1]?.fields || [];
              const wrappedGridFields = gridFields.map(field => ({
                value: {
                  key: field.value.key,
                  url: field.value.url,
                  title: field.value.title,
                  content: field.value.content
                }
              }));
              contentData = {
                section: sectionResult._id,
                slug: section.slug,
                title: section.name,
                subtitle: `Transform ${categoryName} grid`,
                images: [],
                fields: wrappedGridFields,
                isActive: true
              }
            } else {
              // Create content with the generated image
              contentData = {
                section: sectionResult._id,
                slug: section.slug,
                title: section.name === 'Hero Section' ? 'Hero Section' : section.name === 'Text to Anything' ? `Text to ${categoryName}` : `Why Use ${categoryName}`,
                subtitle: (generatedDescription || 'No description').replace(/[\*\#]/g, ''),
                images: [{
                  url: mainImageUrl || '',
                  alt: generatedTitle,
                  width: 1024,
                  height: 1024
                }],
                fields: [],
                isActive: true
              };
            }

            const contentResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/content', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              },
              body: JSON.stringify(contentData)
            });

            if (!contentResponse.ok) {
              throw new Error(`Failed to create content for ${section.name}`);
            }

            const contentResult = await contentResponse.json();
            console.log(`Content created for ${section.name}:`, contentResult);
            showAlert(`${section.name} created successfully!`, 'success');
        
          } catch (error) {
            console.error(`Error processing ${section.name}:`, error);
            showAlert(`Failed to process ${section.name}. ${error.message}`, 'danger');
            throw error;
          }
        });

        // Wait for all sections to complete
        await Promise.all(sectionPromises);
      } catch (error) {
        console.error('Error in generateImageAndContent:', error);
        showAlert('Failed to generate AI images. Please try again.', 'danger');
      } finally {
        // Hide loader
        loader.classList.add('d-none');
      }
    }
    } 
  );
</script>