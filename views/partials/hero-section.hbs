<!-- Add Font Awesome CDN in the head section -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<div class="section-content">
  <h2 class="h4 mb-3">Hero Configuration</h2>

  <div class="card border-0 shadow-lg overflow-hidden">
  <div class="card-body p-4">

    <form class="needs-validation" novalidate>
      <!-- Title/Subtitle Group (Improved spacing + floating labels) -->
      <div class="row g-3 mb-4">
        <div class="col-md-6">
          <div class="form-floating">
            <input style="width: 100%;" type="text" 
                   class="form-control" 
                   id="banner-title" 
                   placeholder="Title"
                   required>
            <label for="banner-title" class="text-muted">Title</label>
          </div>
        </div>
        <div class="col-md-6">
          <div class="form-floating">
            <input style="width: 100%;" type="text" 
                   class="form-control" 
                   id="banner-subtitle" 
                   placeholder="Subtitle">
            <label for="banner-subtitle" class="text-muted">Subtitle</label>
          </div>
        </div>
      </div>

      <div class="mt-3">
          <div class="d-flex align-items-center gap-2">
            <input style="width: 80%;" type="text" 
                   class="form-control" 
                   id="ai-prompt" 
                   placeholder="Enter a prompt for AI image generation">
            <button type="button" 
                    class="btn btn-primary" 
                    id="generate-ai-image">
              <i class="fas fa-magic me-2"></i>Generate AI Image
            </button>
          </div>
        </div>

      <!-- Image Gallery (Modern masonry grid + hover effects) -->
      <div class="mb-4 mt-4">
        <label class="form-label small text-uppercase fw-semibold text-muted mb-2">Gallery</label>
        <div class="row g-3" id="image-preview-container">
          <!-- Single Image Card with replace button -->
          <div class="col-12">
            <div class="d-flex align-items-center gap-3 p-1 bg-light rounded-3">
              <div class="ratio ratio-4x3" style="width: 300px;">
                <img src="https://res.cloudinary.com/dlzk6nqyg/image/upload/v1745907984/airbrush-media/njmpgswg4pdlaso3sgca.png"
                     class="object-fit-contain rounded"
                     alt="Ghibli Image">
                <button class="btn-replace-image btn btn-sm btn-outline-primary position-absolute top-0 end-0 m-1">
                  <i class="fas fa-sync-alt"></i>
                </button>
              </div>
              <div class="flex-grow-1">
                <h6 class="mb-1">Current Image</h6>
                <p class="small text-muted mb-0">Click the replace button to change the image</p>
              </div>
            </div>
          </div>
        </div>
        <!-- AI Image Generation Section -->
      </div>

      <!-- Action Buttons (Sticky bottom with gradient) -->
      <div class="pt-4 mt-4 border-top">
        <div class="d-flex justify-content-end gap-3">
          <button type="button" class="btn btn-outline-secondary px-4 rounded-pill">Cancel</button>
          <button type="submit" class="btn btn-primary px-4 rounded-pill shadow-sm">
            <i class="bi bi-check-lg me-2"></i>Save Changes
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<!-- Add alert container at the end of the body -->
<div class="alert-container position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
  <div id="heroSuccessAlert" class="alert alert-success d-flex align-items-center mb-0 d-none">
    <i class="bi bi-check-circle-fill me-2"></i>
    <div>
      <strong>Success!</strong> Your changes have been saved.
    </div>
  </div>
</div>

<style>
  .compact-form .form-control-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
  }
  .img-cover {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .hover-zoom:hover img {
    transform: scale(1.05);
    transition: transform 0.3s ease;
  }
  .border-dashed {
    border-style: dashed !important;
  }
  .transition-all {
    transition: all 0.2s ease;
  }
  .hover-shadow-lg:hover {
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.1);
  }

  /* Override Bootstrap's ratio positioning for buttons */
  .ratio .btn-replace-image {
    position: absolute;
    left: auto !important; 
    top: 0;
    right: 0;
    width: 36px;
    height: 36px;
    z-index: 10;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .ratio .btn-replace-image:hover {
    background: white;
    transform: rotate(180deg);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  }

  .ratio .btn-replace-image i {
    font-size: 1.1rem;
    color: #0d6efd;
  }

  .ratio .btn-replace-image:hover i {
    color: #0a58ca;
  }

  /* Ensure the image container has proper padding */
  .ratio.ratio-4x3 {
    padding: 10px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }

  /* Make sure the image fits properly */
  .object-fit-contain {
    object-fit: contain !important;
    max-width: 100%;
    max-height: 100%;
  }

  /* Alert container styles */
  .alert-container {
    min-width: 300px;
    max-width: 500px;
  }

  .alert-container .alert {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    border: none;
    animation: slideIn 0.3s ease-out;
    margin-bottom: 0;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style>

<script>
  const showAlert = (message, type = 'success') => {
    // Create alert container if it doesn't exist
    let alertContainer = document.querySelector('.alert-container');
    if (!alertContainer) {
      alertContainer = document.createElement('div');
      alertContainer.className = 'alert-container position-fixed bottom-0 end-0 p-3';
      alertContainer.style.zIndex = '1050';
      document.body.appendChild(alertContainer);
    }

    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show py-2 px-3 mb-2`;
    alertDiv.style.fontSize = '0.875rem';
    alertDiv.style.maxWidth = '500px';
    alertDiv.style.minWidth = '300px';
    alertDiv.innerHTML = `
      <strong>${type === 'success' ? 'Success!' : type === 'danger' ? 'Error!' : 'Note:'}</strong> ${message}
      <button type="button" class="btn-close btn-close-sm" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    // Add alert to the container
    alertContainer.appendChild(alertDiv);
    
    // Remove alert after 4 seconds
    setTimeout(() => {
      alertDiv.classList.add('fade');
      setTimeout(() => {
        alertDiv.remove();
        // Remove container if it's empty
        if (alertContainer.children.length === 0) {
          alertContainer.remove();
        }
      }, 300);
    }, 4000);
  };

  // Only execute this code when hero-section is loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Hide any existing alerts when page loads
    const successAlert = document.getElementById('heroSuccessAlert');
    if (successAlert) {
      successAlert.classList.add('d-none');
    }

    // Check if we're on the hero section page
    if (window.location.pathname.includes('hero-section')) {
      // Get content ID and category from the URL
      const urlParams = new URLSearchParams(window.location.search);
      
      // Get content ID from the link that was clicked
      const getContentId = () => {
        // Get from URL parameters
        if (urlParams.has('id')) {
          return urlParams.get('id');
        }
        
        // Fallback: check for data-content-id attribute (for backward compatibility)
        if (document.referrer.includes('/hero-section')) {
          const sidebarLink = document.querySelector('a[href="/hero-section"]');
          if (sidebarLink && sidebarLink.getAttribute('data-content-id')) {
            return sidebarLink.getAttribute('data-content-id');
          }
        }
        
        return null;
      };
      
      const contentId = getContentId();
      const categoryId = urlParams.get('categoryId');
      
      console.log('Content ID:', contentId);
      console.log('Category ID:', categoryId);
      
      // Current media content holder
      let currentMedia = null;
      
      // Handle image replace functionality
      const replaceButton = document.querySelector('.btn-replace-image');
      const mediaUpload = document.createElement('input');
      mediaUpload.type = 'file';
      mediaUpload.accept = 'image/*,video/*';
      mediaUpload.style.display = 'none';
      document.body.appendChild(mediaUpload);
      
      if (replaceButton) {
        // Trigger file input when replace button is clicked
        replaceButton.addEventListener('click', function() {
          mediaUpload.click();
        });
        
        // Handle file selection
        mediaUpload.addEventListener('change', function(event) {
          const file = event.target.files[0];
          if (!file) return;
          
          if (file.type.startsWith('image/') || file.type.startsWith('video/')) {
            // Create object URL for preview
            const objectUrl = URL.createObjectURL(file);
            
            // Prepare media object
            currentMedia = {
              type: file.type.startsWith('image/') ? 'image' : 'video',
              file: file,
              url: objectUrl
            };
            
            // Update gallery with new media
            updateGallery(currentMedia);
            
            // Upload file to server
            uploadMediaToServer(file, contentId).then(response => {
              if (response && response.url) {
                // Update the currentMedia with the server URL
                currentMedia.serverUrl = response.url;
                currentMedia.url = response.url;
                console.log('Media uploaded to server:', response);
              }
            });
          } else {
            alert('Please select an image or video file.');
          }
        });
      }
      
      // Only attempt to fetch if we have a content ID
      if (contentId) {
        fetch(`https://airbrush-admin-backend.onrender.com/api/content/id/${contentId}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok: ' + response.statusText);
          }
          return response.json();
        })
        .then(data => {
          console.log('API Response:', data);
          // You can handle the data here
          if (data && data.title) {
            document.getElementById('banner-title').value = data.title;
          }
          if (data && data.subtitle) {
            document.getElementById('banner-subtitle').value = data.subtitle;
          }
          // Store current media
          if (data && data.images && Array.isArray(data.images) && data.images.length > 0) {
            // Use the first image in the array
            currentMedia = data.images[0];
            updateGallery(currentMedia);
          }
        })
        .catch(error => {
          console.error('Error fetching data from API:', error);
        });
      } else {
        console.log('No content ID available for fetch request');
      }
      
      // Create new section and content
      const createNewHeroSection = async () => {
        if (!categoryId) return;

        try {
          // First create a new section
          const sectionResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/sections', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              name: 'Hero Section',
              slug: 'hero-section',
              description: 'Hero section for Studio Ghibli showcase',
              category: categoryId,
              isFolder: false,
              order: 0,
              isActive: true
            })
          });

          if (!sectionResponse.ok) {
            throw new Error('Failed to create section');
          }

          const sectionResult = await sectionResponse.json();
          console.log('Created new section:', sectionResult);

          // Then create new content for the section
          const contentData = {
            section: sectionResult._id,
            slug: 'hero-section',
            title: document.getElementById('banner-title').value.trim(),
            subtitle: document.getElementById('banner-subtitle').value.trim(),
            fields: [
              { value: document.getElementById('banner-title').value.trim() },
              { value: document.getElementById('banner-subtitle').value.trim() }
            ],
            images: currentMedia ? [currentMedia] : [],
            isActive: true
          };

          const contentResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/content', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(contentData)
          });

          if (!contentResponse.ok) {
            throw new Error('Failed to create content');
          }

          const contentResult = await contentResponse.json();
          console.log('Created new content:', contentResult);
          
          // Update the contentId and reload the page
          window.location.href = `/hero-section?id=${contentResult._id}&categoryId=${categoryId}`;
          
        } catch (error) {
          console.error('Error creating new hero section:', error);
          showAlert('Failed to create new section. Please try again.', 'danger');
        }
      };

      // Add event listener to Save Changes button
      const saveButton = document.querySelector('button[type="submit"]');
      if (saveButton) {
        // Prevent the default form submission
        document.querySelector('form.needs-validation').addEventListener('submit', function(e) {
          e.preventDefault();
        });
        
        saveButton.addEventListener('click', function() {
          if (contentId) {
            // If we have a contentId, update the existing content
            updateContent(contentId, currentMedia);
          } else if (categoryId) {
            // If we have a categoryId but no contentId, create new section and content
            createNewHeroSection();
          } else {
            showAlert('Cannot save: Missing content ID or category ID.', 'danger');
          }
        });
      }
    }
  });
  
  // Function to update content via API
  function updateContent(contentId, media) {
    if (!contentId) {
      console.error('No content ID available for update');
      return;
    }
    
    // Get values from form
    const title = document.getElementById('banner-title').value;
    const subtitle = document.getElementById('banner-subtitle').value;
    
    // Prepare data for API
    const updateData = {
      title: title,
      subtitle: subtitle,
      images: []
    };
    
    // Add media if available
    if (media) {
      const mediaUrl = media.serverUrl || media.url;
      const mediaObject = {
        url: mediaUrl,
        alt: title || "Hero media",
        width: 1200,
        height: 800,
        order: 1,
        type: media.type || 'image'
      };
      updateData.images = [mediaObject];
    }
    
    // Show loading state
    const saveButton = document.querySelector('button[type="submit"]');
    const originalButtonText = saveButton.innerHTML;
    saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
    saveButton.disabled = true;
    
    // JWT Token for authorization
    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTIyNTEyMSwiZXhwIjoxNzQ1MzExNTIxfQ.O1xfunWURBxt7tqcgXH_yWEyq-7VOA61LX6qrmEHXoA';
    
    // Send update request
    fetch(`https://airbrush-admin-backend.onrender.com/api/content/${contentId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(updateData)
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Update failed: ' + response.statusText);
      }
      return response.json();
    })
    .then(data => {
      console.log('Update successful:', data);
      
      // Show success message in bottom right
      const successAlert = document.getElementById('heroSuccessAlert');
      if (successAlert) {
        successAlert.classList.remove('d-none');
        
        // Hide after 3 seconds
        setTimeout(() => {
          successAlert.classList.add('d-none');
        }, 3000);
      }
    })
    .catch(error => {
      console.error('Error updating content:', error);
      
      // Show error message in bottom right
      const successAlert = document.getElementById('heroSuccessAlert');
      if (successAlert) {
        successAlert.className = 'alert alert-danger d-flex align-items-center mb-0';
        successAlert.classList.remove('d-none');
        
        // Hide after 3 seconds
        setTimeout(() => {
          successAlert.classList.add('d-none');
          // Reset to success alert for next time
          successAlert.className = 'alert alert-success d-flex align-items-center mb-0 d-none';
          successAlert.innerHTML = `
            <i class="bi bi-check-circle-fill me-2"></i>
            <div>
              <strong>Success!</strong> Your changes have been saved.
            </div>
          `;
        }, 3000);
      }
    })
    .finally(() => {
      // Restore button state
      saveButton.innerHTML = originalButtonText;
      saveButton.disabled = false;
    });
  }

  // Function to update the gallery with images from API
  function updateGallery(content) {
    const galleryContainer = document.getElementById('image-preview-container');
    if (!galleryContainer) return;
    
    // Get the container where we'll put the media
    const mediaContainer = galleryContainer.querySelector('.ratio.ratio-4x3');
    if (!mediaContainer || !content) return;
    
    // Clear existing content
    mediaContainer.innerHTML = '';
    
    console.log('Content:', 'run content');
    // Create the appropriate element based on media type
    if (content.type === 'video' || (content.url && content.url.toLowerCase().endsWith('.mp4'))) {
      // Create video element
      const videoElement = document.createElement('video');
      videoElement.src = content.url || content;
      videoElement.controls = true;
      videoElement.autoplay = false;
      videoElement.muted = true;
      videoElement.className = 'object-fit-contain rounded w-100 h-100';
      mediaContainer.appendChild(videoElement);
    } else {
      // Create image element (default)
      const imageElement = document.createElement('img');
      imageElement.src = content.url || content;
      imageElement.className = 'object-fit-contain rounded';
      imageElement.alt = "Ghibli Media";
      mediaContainer.appendChild(imageElement);
    }
    
    // Add replace button
    const replaceButton = document.createElement('button');
    replaceButton.className = 'btn-replace-image btn btn-sm btn-outline-primary position-absolute top-0 end-0 m-1';
    replaceButton.innerHTML = '<i class="fas fa-sync-alt"></i>';
    replaceButton.addEventListener('click', function() {
      document.querySelector('input[type="file"]').click();
    });
    mediaContainer.appendChild(replaceButton);
  }

  // Function to upload media to server
  async function uploadMediaToServer(file, contentId) {
    if (!file) return null;
    
    // JWT Token for authorization
    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTEzMDA2MywiZXhwIjoxNzQ1MjE2NDYzfQ.X7iaXBMdl1dYL15owKDCHzaWQpmtD_b74askqD5vasw';
    
    // Create FormData
    const formData = new FormData();
    formData.append('images', file);
    
    try {
      // Show loading indicator
      const loadingIndicator = document.createElement('div');
      loadingIndicator.className = 'position-absolute bg-dark bg-opacity-50 w-100 h-100 d-flex align-items-center justify-content-center text-white';
      loadingIndicator.style.zIndex = '10';
      loadingIndicator.innerHTML = '<div class="spinner-border text-light" role="status"><span class="visually-hidden">Uploading...</span></div>';
      
      // Add loading indicator to the media card
      const mediaCard = document.querySelector('.ratio.ratio-4x3');
      if (mediaCard) {
        mediaCard.style.position = 'relative';
        mediaCard.appendChild(loadingIndicator);
      }
      
      // Upload the media to Cloudinary via your endpoint
      const response = await fetch('https://airbrush-admin-backend.onrender.com/api/images', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      });
      
      if (!response.ok) {
        throw new Error('Upload failed: ' + response.statusText);
      }
      
      const data = await response.json();
      
      // Remove loading indicator
      if (loadingIndicator) {
        loadingIndicator.remove();
      }
      
      // Return the Cloudinary URL
      if (data && data.files) {
        // Get media type
        const isVideo = file.type.startsWith('video/');
        
        // Update the media container
        updateGallery({
          type: isVideo ? 'video' : 'image',
          url: data.files[0].url
        });
        
        // Return the media data
        return {
          url: data.files[0].url,
          alt: "Uploaded media",
          width: 1200,
          height: 800,
          order: 1,
          type: isVideo ? 'video' : 'image'
        };
      }
      
      return null;
    } catch (error) {
      console.error('Error uploading to Cloudinary:', error);
      
      // Remove loading indicator if it exists
      const loadingIndicator = document.querySelector('.position-absolute.bg-dark.bg-opacity-50');
      if (loadingIndicator) {
        loadingIndicator.remove();
      }
      
      // Show error alert
      alert('Failed to upload media. Please try again.');
      return null;
    }
  }

  // Remove any existing alerts when the page loads
  document.addEventListener('DOMContentLoaded', function() {
    // Remove any existing alerts except our fixed one
    const existingAlerts = document.querySelectorAll('.alert:not(#heroSuccessAlert)');
    existingAlerts.forEach(alert => alert.remove());
    
    // Remove any alert containers except our fixed one
    const alertContainers = document.querySelectorAll('.alert-container:not(.position-fixed)');
    alertContainers.forEach(container => container.remove());
    
    // Remove any alerts that might be in the card body
    const cardBody = document.querySelector('.card-body');
    if (cardBody) {
      const cardAlerts = cardBody.querySelectorAll('.alert');
      cardAlerts.forEach(alert => alert.remove());
    }
  });

  // Add this new function for AI image generation
  async function generateAIImage(prompt) {
    if (!prompt) {
      showAlert('Please enter a prompt for image generation', 'warning');
      return;
    }

    // Get content ID from the URL or fallback
    const getContentId = () => {
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has('id')) {
        return urlParams.get('id');
      }
      
      if (document.referrer.includes('/hero-section')) {
        const sidebarLink = document.querySelector('a[href="/hero-section"]');
        if (sidebarLink && sidebarLink.getAttribute('data-content-id')) {
          return sidebarLink.getAttribute('data-content-id');
        }
      }
      
      return null;
    };

    const contentId = getContentId();
    if (!contentId) {
      showAlert('Cannot generate image: Missing content ID.', 'danger');
      return;
    }

    const generateButton = document.getElementById('generate-ai-image');
    const originalButtonText = generateButton.innerHTML;
    generateButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...';
    generateButton.disabled = true;

    try {
      const response = await fetch('https://api.deepinfra.com/v1/openai/images/generations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ofZxkV2E7aTDvbirZCB16zJHSbbfOxdN`
        },
        body: JSON.stringify({
          prompt: prompt,
          size: "1024x1024",
          model: "black-forest-labs/FLUX-1-dev",
          n: 1,
          response_format: "b64_json"  // Request base64 response
        })
      });

      if (!response.ok) {
        throw new Error('AI image generation failed');
      }

      const data = await response.json();
      
      if (data.data && data.data[0] && data.data[0].b64_json) {
        // Convert base64 to blob
        const base64Data = data.data[0].b64_json;
        const byteCharacters = atob(base64Data);
        const byteArrays = [];
        
        for (let i = 0; i < byteCharacters.length; i++) {
          byteArrays.push(byteCharacters.charCodeAt(i));
        }
        
        const byteArray = new Uint8Array(byteArrays);
        const blob = new Blob([byteArray], { type: 'image/png' });
        
        // Create a file from the blob
        const file = new File([blob], 'ai-generated-image.png', { type: 'image/png' });
        
        // Upload the generated image to your server
        const uploadResponse = await uploadMediaToServer(file, contentId);
        
        if (uploadResponse) {
          // Create media object for database update
          const mediaObject = {
            type: 'image',
            url: uploadResponse.url,
            alt: "AI Generated Image",
            width: 1200,
            height: 800,
            order: 1
          };

          // Update the gallery with the new image
          updateGallery(mediaObject);
          
          // Update the content in the database with the new image
          updateContent(contentId, mediaObject);
          
          showAlert('AI image generated and saved successfully!', 'success');
        }
      }
    } catch (error) {
      console.error('Error generating AI image:', error);
      showAlert('Failed to generate AI image. Please try again.', 'danger');
    } finally {
      generateButton.innerHTML = originalButtonText;
      generateButton.disabled = false;
    }
  }

  // Add event listener for the AI image generation button
  document.addEventListener('DOMContentLoaded', function() {
    const generateButton = document.getElementById('generate-ai-image');
    if (generateButton) {
      generateButton.addEventListener('click', function() {
        const prompt = document.getElementById('ai-prompt').value.trim();
        generateAIImage(prompt);
      });
    }
  });
</script>