{{!-- Text to 3D Section Styles --}}
<style>
    .text-to-3d-section {
        position: relative;
        width: 80%;
        height: 320px;
        background: #1a103f;
        border-radius: 16px;
        margin-inline: auto;
        margin-block: 12rem;
        display: none; /* Hide by default, will show when content is loaded */
    }

    .text-to-3d-container {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        position: relative;
        padding-left: 4rem; !important
        padding: 4rem;
        background: url('/images/boy-bg.png') repeat;
        background-size: 150px 150px;
        border-radius: 12px;
    }

    .black-overlay {
        position: absolute;
        background: linear-gradient(to right, #4526B1, #FF6154);
        opacity: 90%;
        border-radius: 12px;
        z-index: 50;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .text-to-3d-content {
        max-width: 550px;
        z-index: 100;
    }

    .text-to-3d-title {
        font-size: 4rem;
        font-weight: bold;
        color: white;
        margin-bottom: 1rem;
        line-height: 1.2;
    }

    .text-to-3d-description {
        font-size: 2.5rem;
        color: rgba(255, 255, 255, 0.8);
        margin-bottom: 1.5rem;
        line-height: 1.5;
        max-width: 500px;
    }

    .start-button {
        background: white;
        color: #4526B1;
        width: fit-content;
        font-weight: 8 00;
        padding: 1.5rem 5rem;
        border-radius: 6px;
        font-size: 2rem;
        font-weight: 500;
        border: none;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .start-button:hover {
        background: #553C9A;
    }

    .preview-container {
        position: absolute;
        top: 5%;
        right: 2%;
        z-index: 70;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 290px;
    }

    .preview-container-click {
        position: absolute;
        top: 15%;
        right: 30%;
        z-index: 90;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .preview-image-click {
        height: 230px;

    }


    .preview-image {
        height: 290px;
        border-radius: 12px;
        object-fit: contain;
    }

    .character-image-3d {
        position: absolute;
        right: 0;
        bottom: -20px;
        width: 400px;
        height: auto;
        z-index: 1;
    }

    @media (max-width: 1024px) {
        .character-image-3d {
            width: 350px;
        }
    }

    @media (max-width: 768px) {
        .text-to-3d-section {
            height: auto;
            min-height: 400px;
        }

        .text-to-3d-container {
            flex-direction: column;
            position: relative;
            text-align: center;
            min-height: 600px;
            padding: 2rem;
        }

        .text-to-3d-content {
            max-width: 300px;
            margin-bottom: 2rem;
        }

        .text-to-3d-title{
            font-size: 3rem;
        }

        .text-to-3d-description {
            margin: 1rem auto 1.5rem;
            font-size: 1.5rem;
        }

        .preview-container {
            position: absolute;
            transform: none;
            bottom: 0%;
            width: 100%;
            left: auto;
            top: auto;
        }

        .preview-container img{
            height: 320px;
            object-fit: cover;
        }


        .character-image-3d {
            position: relative;
            width: 250px;
            right: auto;
            bottom: auto;
            margin: 2rem auto 0;
        }
    }

    .prompt-input {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        margin-bottom: 1.5rem;
        width: 100%;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        padding: 1rem;
    }

    .ai-icon {
        width: 32px;
        height: 32px;
        background-color: #333;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .prompt-input textarea {
        flex: 1;
        resize: none;
        background: transparent;
        border: none;
        color: white;
        font-size: 1.5rem;
        padding: 0.5rem;
        outline: none;
        min-height: 2.5rem;
        max-height: 6rem;
        overflow-y: auto;
        width: 100%;
        line-height: 1.4;
    }

    .prompt-input textarea::placeholder {
        color: rgba(255, 255, 255, 0.5);
    }
</style>

{{!-- Text to 3D Section Content --}}
<section class="text-to-3d-section">
    <div class="text-to-3d-container">
        <div class="black-overlay"></div>
        <div class="text-to-3d-content">
            <h1 class="text-to-3d-title">Text to 3d Image</h1>
            <p class="text-to-3d-description">
                Generate stunning textures for existing 3D models using text prompts in less than a minute.
            </p>
            <button class="start-button">Generate</button>
        </div>
        {{!-- <div class="preview-container-click">
            <img src="/images/click.png" alt="3D Model Preview" class="preview-image-click">
        </div> --}}
        <div class="preview-container">
            <img src="/images/boy-image.png" alt="3D Model Preview" class="preview-image">
        </div>
    </div>
</section>

<script>
    // Function to wait for categories to be initialized if needed
    function ensureCategoriesInitialized() {
        // If categories are already initialized, return resolved promise
        if (window.categoriesInitialized) {
            return Promise.resolve();
        }
        
        // Otherwise, return a promise that resolves when the categories are ready
        return new Promise(resolve => {
            window.addEventListener('categoriesReady', () => {
                console.log('Categories ready event received in text-to-3d component');
                resolve();
            });
        });
    }
    
    // Function to fetch text-to-3d content using category ID and slug
    async function fetchTextTo3dContent() {
        console.log('Text-to-3d component initializing');
        
        // Wait for categories to be initialized
        await ensureCategoriesInitialized();
        console.log('Categories are ready, proceeding with text-to-3d fetch');
        
        try {
            // Extract the slug from the URL path
            const urlPath = window.location.pathname;
            const pathSlug = urlPath.substring(1); // Remove the leading slash
            
            // Convert slug to camelCase for window key lookup
            const camelCaseKey = pathSlug.replace(/-./g, (match) => {
                return match[1].toUpperCase();
            });
            
            // Try to get the category ID from the window object
            const categoryId = window[`airbrush${camelCaseKey}`];
            console.log('Using category ID for text-to-3d:', categoryId);
            
            // Dynamically determine the content slug based on the path
            let slug = 'text-to-anything'
            
            console.log(`Fetching text-to-3d content with categoryId: ${categoryId} and slug: ${slug}`);
            const response = await fetch(`https://airbrush-admin-backend.onrender.com/api/content/category/${categoryId}/slug/${slug}`);
            
            if (!response.ok) {
                throw new Error('Failed to fetch text-to-3d content by slug');
            }
            
            const content = await response.json();
            console.log('Text to 3D content loaded:', content);
            
            // Update text-to-3d section with the content
            if (content && content.images && Array.isArray(content.images) && content.images.length > 0) {
                // Show the section since we have valid content
                const section = document.querySelector('.text-to-3d-section');
                if (section) {
                    section.style.display = 'block';
                }
                
                // Update the content
                updateTextTo3dContent(content);
            } else {
                console.log('Text to 3D content does not contain proper structure, keeping it hidden');
            }
        } catch (error) {
            console.error('Error fetching text-to-3d content:', error);
            // Keep the section hidden when there's an error
        }
    }
    
    // Function to update the text-to-3d section with the fetched content
    function updateTextTo3dContent(content) {
        console.log('Updating text-to-3d with content:', content);
        
        // Update title if available
        if (content.title) {
            const titleElement = document.querySelector('.text-to-3d-title');
            if (titleElement) {
                titleElement.textContent = content.title;
            }
        }
        
        // Update description if available
        if (content.subtitle) {
            const descriptionElement = document.querySelector('.text-to-3d-description');
            if (descriptionElement) {
                descriptionElement.textContent = content.subtitle;
            }
        }
        
        // Update button text if available
        if (content.buttonText) {
            const buttonElement = document.querySelector('.start-button');
            if (buttonElement) {
                buttonElement.textContent = content.buttonText;
            }
        }
        
        // Update images if available
        if (content.images && Array.isArray(content.images) && content.images.length > 0) {
            console.log('Found images to update:', content.images);
            
            // Extract image URLs from the content
            const imageUrls = [];
            
            // Collect valid image URLs
            content.images.forEach((image, index) => {
                console.log(`Processing image ${index}:`, image);
                if (image.url) {
                    imageUrls.push({
                        url: image.url,
                        alt: image.alt || ''
                    });
                }
            });
            
            console.log('Extracted image URLs:', imageUrls);
            
            if (imageUrls.length > 0) {
                // Update main preview image
                const previewContainer = document.querySelector('.preview-container');
                if (previewContainer) {
                    // Check if there's a video element
                    const videoElement = previewContainer.querySelector('video');
                    
                    // Get the image URL from the response
                    const imageUrl = imageUrls[0].url;
                    
                    // If we have an image URL in the response, prefer showing the image instead of video
                    if (imageUrl) {
                        // If there's already a video element
                        if (videoElement) {
                            // Hide the video and create/show an image instead
                            videoElement.style.display = 'none';
                            
                            // Check if we already have an image element
                            let imgElement = document.querySelector('.preview-container img');
                            console.log('imgElement', imgElement);
                            
                            // If no image element exists yet, create one
                            if (!imgElement) {
                                imgElement = document.createElement('img');
                                imgElement.className = 'preview-image';
                                previewContainer.appendChild(imgElement);
                            }
                            
                            // Set the image properties
                            imgElement.src = imageUrl;
                            imgElement.alt = imageUrls[0].alt || 'Text to 3D Preview';
                            imgElement.style.display = 'block';
                            
                            // Add loading handlers for debugging
                            imgElement.onload = function() {
                                console.log('Preview image loaded successfully:', imageUrl);
                            };
                            
                            imgElement.onerror = function() {
                                console.error('Failed to load preview image:', imageUrl);
                                // If image fails to load, show the video as fallback
                                if (videoElement) {
                                    videoElement.style.display = 'block';
                                    imgElement.style.display = 'none';
                                }
                            };
                        } else {
                            // If there's no video element, just handle the image
                            let imgElement = document.querySelector('.preview-container img');
                            
                            // If no image element exists yet, create one
                            if (!imgElement) {
                                imgElement = document.createElement('img');
                                imgElement.className = 'preview-image';
                                previewContainer.appendChild(imgElement);
                            }
                            
                            // Set the image properties
                            imgElement.src = imageUrl;
                            imgElement.alt = imageUrls[0].alt || 'Text to 3D Preview';
                            imgElement.style.display = 'block';
                            
                            // Add loading handlers for debugging
                            imgElement.onload = function() {
                                console.log('Preview image loaded successfully:', imageUrl);
                            };
                            
                            imgElement.onerror = function() {
                                console.error('Failed to load preview image:', imageUrl);
                                imgElement.style.display = 'none';
                            };
                        }
                    }
                }
                
                // Update click image if we have a second image
                if (imageUrls.length > 1) {
                    const clickContainer = document.querySelector('.preview-container-click');
                    if (clickContainer) {
                        let clickImage = clickContainer.querySelector('img');
                        
                        // If no image element exists yet, create one
                        if (!clickImage) {
                            clickImage = document.createElement('img');
                            clickImage.className = 'preview-image-click';
                            clickContainer.appendChild(clickImage);
                        }
                        
                        // Set the image properties
                        clickImage.src = imageUrls[1].url;
                        clickImage.alt = imageUrls[1].alt || 'Click Preview';
                        clickImage.style.display = 'block';
                        
                        // Add loading handlers for debugging
                        clickImage.onload = function() {
                            console.log('Click image loaded successfully:', imageUrls[1].url);
                        };
                        
                        clickImage.onerror = function() {
                            console.error('Failed to load click image:', imageUrls[1].url);
                            clickImage.style.display = 'none';
                        };
                    }
                }
                
                // Force a repaint to ensure everything is updated
                setTimeout(() => {
                    const container = document.querySelector('.text-to-3d-container');
                    if (container) {
                        container.style.opacity = '0.99';
                        setTimeout(() => {
                            container.style.opacity = '1';
                        }, 50);
                    }
                }, 100);
            }
        } else {
            console.warn('No images found in the content:', content);
        }
    }
    
    // Call the function when the page loads
    document.addEventListener('DOMContentLoaded', fetchTextTo3dContent);
</script>
</script>