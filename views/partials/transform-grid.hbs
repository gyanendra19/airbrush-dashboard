<!-- Transform Grid Component -->
<div class="transform-grid-component">
  <div class="d-flex flex-wrap gap-2 mb-2" id="transformGridContainer">
    <!-- Grid items will appear here -->
  </div>
  
  <div class="d-flex gap-2">
    <!-- Add Item Button -->
    <button type="button" class="btn btn-sm btn-outline-primary" id="addItemBtn">
      <i class="bi bi-plus-circle me-1"></i> Add Item
    </button>
    
    <!-- Save Button -->
    <button type="button" class="btn btn-sm btn-success" id="saveGridBtn">
      <i class="bi bi-check-circle me-1"></i> Save Changes
    </button>
  </div>
</div>

<!-- Alert container -->
<div class="alert-container position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
  <div id="gridSuccessAlert" class="alert alert-success d-flex align-items-center mb-0 d-none">
    <i class="bi bi-check-circle-fill me-2"></i>
    <div>
      <strong>Success!</strong> Your changes have been saved.
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const addItemBtn = document.getElementById('addItemBtn');
    const saveGridBtn = document.getElementById('saveGridBtn');
    const gridContainer = document.getElementById('transformGridContainer');
    
    // Array to store grid items
    let gridItems = [];
    let contentId = null;
    
    // Get content ID from URL parameters
    const getContentId = () => {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get('id');
    };
    
    // Fetch grid items from API
    const fetchGridItems = async () => {
      contentId = getContentId();
      console.log('Content ID:', contentId);
      
      if (!contentId) {
        console.error('No content ID found');
        return;
      }
      
      try {
        const response = await fetch(`https://airbrush-admin-backend.onrender.com/api/content/id/${contentId}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Network response was not ok: ' + response.statusText);
        }
        
        const data = await response.json();
        console.log('API Response:', data);
        
        // Clear the grid
        gridContainer.innerHTML = '';
        gridItems = [];
        
        // Check if we have fields in the response
        if (data && data.fields && Array.isArray(data.fields) && data.fields.length > 0) {
          // Store items and render them
          gridItems = [...data.fields];
          data.fields.forEach(item => {
            addItemToGrid(item);
          });
        }
      } catch (error) {
        console.error('Error fetching grid items:', error);
      }
    };
    
    // Save grid changes
    const saveGridChanges = async () => {
      const urlParams = new URLSearchParams(window.location.search);
      const categoryId = urlParams.get('categoryId');
      
      // Show loading state
      saveGridBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
      saveGridBtn.disabled = true;
      
      const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTMyMDAwMywiZXhwIjoxNzQ1NDA2NDAzfQ.5V9SyTCRvPWGFMzOeIF53PAAyie1XQWurRrBCE09axM';
      
      try {
        if (categoryId && !contentId) {
          // Create new section first
          const sectionResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/sections', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
              name: 'Transform Grid',
              slug: 'transform-grid',
              description: 'Transform Grid section',
              category: categoryId,
              isFolder: false,
              order: 0,
              isActive: true
            })
          });

          if (!sectionResponse.ok) {
            throw new Error('Failed to create section');
          }

          const sectionResult = await sectionResponse.json();

          // Create new content
          const contentResponse = await fetch('https://airbrush-admin-backend.onrender.com/api/content', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
              section: sectionResult._id,
              slug: 'transform-grid',
              title: 'Transform Grid',
              fields: gridItems,
              isActive: true
            })
          });

          if (!contentResponse.ok) {
            throw new Error('Failed to create content');
          }

          const contentResult = await contentResponse.json();
          showAlert('Successfully created Transform Grid Section')
          
          // Update contentId and reload
          contentId = contentResult._id;
          window.location.href = `/transform-grid?id=${contentId}&categoryId=${categoryId}`;
          
        } else if (contentId) {
          // Update existing content
          const response = await fetch(`https://airbrush-admin-backend.onrender.com/api/content/${contentId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}` 
            },
            body: JSON.stringify({
              fields: gridItems
            })
          });
          
          if (!response.ok) {
            throw new Error('Update failed: ' + response.statusText);
          }
          
          const result = await response.json();
          console.log('Grid updated successfully:', result);
          
          // Show success message
          const successAlert = document.getElementById('gridSuccessAlert');
          if (successAlert) {
            successAlert.classList.remove('d-none');
            setTimeout(() => {
              successAlert.classList.add('d-none');
            }, 3000);
          }
        }
      } catch (error) {
        console.error('Error saving grid:', error);
        showAlert('Failed to save changes. Please try again.', 'danger');
      } finally {
        saveGridBtn.innerHTML = '<i class="bi bi-check-circle me-1"></i> Save Changes';
        saveGridBtn.disabled = false;
      }
    };
    
    // Add item to grid
    function addItemToGrid(itemData = {}) {
      const itemId = 'item-' + Date.now();
      
      const gridItem = document.createElement('div');
      gridItem.className = 'position-relative grid-item-card';
      gridItem.style.width = '300px';
      gridItem.dataset.id = itemId;
      
      gridItem.innerHTML = `
        <div class="card h-100">
          <div class="position-relative" style="height: 200px;">
            <img src="${itemData.value.url || '/images/placeholder.png'}" 
                 class="img-cover rounded-top h-100 w-100" 
                 alt="${itemData.value.title || 'Grid item'}">
            <button class="btn-upload-image btn btn-sm btn-primary position-absolute bottom-0 start-0 m-1">
              <i class="bi bi-upload"></i> Upload
            </button>
            <button class="btn-remove-item btn btn-sm btn-danger position-absolute top-0 end-0 m-1">
              <img src="/images/svg/delete.svg" alt="Delete" style="width: 28px; height: 28px; padding: 5px;">
            </button>
          </div>
          <div class="card-body p-3">
            <div class="mb-3">
              <label class="form-label">Title</label>
              <input type="text" 
                     class="form-control item-title" 
                     value="${itemData.value.title || ''}" 
                     placeholder="Enter title">
            </div>
            <div class="mb-2">
              <label class="form-label">Content</label>
              <textarea class="form-control item-content" 
                        rows="3" 
                        placeholder="Enter content">${itemData.value.content || ''}</textarea>
            </div>
          </div>
        </div>
      `;
      
      gridContainer.appendChild(gridItem);
      
      // Add input change handlers
      const titleInput = gridItem.querySelector('.item-title');
      const contentInput = gridItem.querySelector('.item-content');
      const uploadBtn = gridItem.querySelector('.btn-upload-image');
      
      // Create hidden file input
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = 'image/*';
      fileInput.style.display = 'none';
      gridItem.appendChild(fileInput);
      
      // Handle image upload
      uploadBtn.addEventListener('click', () => fileInput.click());
      
      fileInput.addEventListener('change', async function(e) {
        if (e.target.files && e.target.files[0]) {
          try {
            const file = e.target.files[0];
            const uploadedImage = await uploadImageToServer(file);
            
            if (uploadedImage && uploadedImage.url) {
              const img = gridItem.querySelector('img');
              img.src = uploadedImage.url;
              
              // Update item data
              const index = gridItems.findIndex(item => item.id === itemId);
              if (index !== -1) {
                gridItems[index].image = uploadedImage.url;
              } else {
                gridItems.push({
                  id: itemId,
                  image: uploadedImage.url,
                  title: titleInput.value,
                  content: contentInput.value
                });
              }
            }
          } catch (error) {
            console.error('Error uploading image:', error);
          }
        }
      });
      
      // Handle input changes
      titleInput.addEventListener('change', updateItemData);
      contentInput.addEventListener('change', updateItemData);
      
      function updateItemData() {
        const index = gridItems.findIndex(item => item.id === itemId);
        const newData = {
          id: itemId,
          image: gridItem.querySelector('img').src,
          title: titleInput.value,
          content: contentInput.value
        };
        
        if (index !== -1) {
          gridItems[index] = newData;
        } else {
          gridItems.push(newData);
        }
      }
      
      // Handle item removal
      gridItem.querySelector('.btn-remove-item').addEventListener('click', () => {
        gridItem.remove();
        gridItems = gridItems.filter(item => item.id !== itemId);
      });
    }
    
    // Upload image to server
    async function uploadImageToServer(file) {
      if (!file) return null;
      
      const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTMyMDAwMywiZXhwIjoxNzQ1NDA2NDAzfQ.5V9SyTCRvPWGFMzOeIF53PAAyie1XQWurRrBCE09axM';
      
      const formData = new FormData();
      formData.append('images', file);
      
      try {
        const response = await fetch('https://airbrush-admin-backend.onrender.com/api/images', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData
        });
        
        if (!response.ok) {
          throw new Error('Upload failed: ' + response.statusText);
        }
        
        const data = await response.json();
        
        if (data && data.files && data.files.length > 0) {
          return {
            url: data.files[0].url
          };
        }
        
        return null;
      } catch (error) {
        console.error('Error uploading to server:', error);
        return null;
      }
    }
    
    // Event listeners
    addItemBtn.addEventListener('click', () => addItemToGrid());
    saveGridBtn.addEventListener('click', saveGridChanges);
    
    // Load items on page load
    fetchGridItems();
  });
</script>

<style>
  .grid-item-card {
    transition: all 0.2s ease;
  }
  
  .grid-item-card:hover {
    transform: scale(1.02);
    box-shadow: 0 0.25rem 0.5rem rgba(0,0,0,0.1);
  }
  
  .img-cover {
    object-fit: cover;
  }
  
  .btn-remove-item {
    padding: 0.15rem 0.25rem;
    opacity: 0;
    transition: opacity 0.2s ease;
  }
  
  .grid-item-card:hover .btn-remove-item {
    opacity: 1;
  }
  
  .card {
    border: 1px solid rgba(0,0,0,0.1);
    transition: all 0.2s ease;
  }
  
  .card:hover {
    border-color: rgba(0,0,0,0.2);
  }
  
  .form-label {
    font-weight: 500;
    margin-bottom: 0.5rem;
  }
  
  .form-control {
    border: 1px solid rgba(0,0,0,0.1);
  }
  
  .form-control:focus {
    border-color: #4526B1;
    box-shadow: 0 0 0 0.2rem rgba(69, 38, 177, 0.25);
  }
  
  .alert-container {
    min-width: 300px;
    max-width: 500px;
  }
  
  .alert-container .alert {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    border: none;
    animation: slideIn 0.3s ease-out;
  }
  
  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style> 