<!-- Light Modern Admin Sidebar (No Underlines) -->
<div class="sidebar bg-white shadow-sm">
  <!-- Sidebar Header -->
  <div class="sidebar-header d-flex justify-content-between align-items-center p-4 border-bottom">
    <h3 class="mb-0 fs-5 fw-semibold text-dark">
      <i class="bi bi-speedometer2 me-2 text-primary"></i>Admin Panel
    </h3>
    <button class="sidebar-toggle btn btn-sm btn-outline-secondary d-lg-none">
      <i class="bi bi-x-lg"></i>
    </button>
  </div>

  <!-- User Profile -->
  <div class="sidebar-user p-4 text-center border-bottom">
    <div class="user-avatar mx-auto mb-3">
      <img src="/img/avatar.jpg" 
           class="rounded-circle object-fit-contain" 
           alt="Admin Avatar">
    </div>
    <div class="user-info">
      <h5 class="mb-1 fw-semibold">Admin User</h5>
      <span class="badge bg-primary bg-opacity-10 text-primary rounded-pill">Administrator</span>
    </div>
  </div>

  <!-- Navigation Menu -->
  <ul class="sidebar-nav list-unstyled px-3 py-3">
    <!-- Dashboard -->
    <li class="nav-item mb-2">
      <a href="/" class="nav-link px-3 py-2 rounded-3 d-flex align-items-center active text-decoration-none">
        <i class="bi bi-house-door me-3 text-primary"></i>
        <span>Dashboard</span>
        <span class="ms-auto badge bg-primary text-white">5</span>
      </a>
    </li>

    <!-- Categories Dropdown -->
    <li class="nav-item mb-2">
      <div class="accordion" id="categoriesAccordion">
        <div class="accordion-item border-0 bg-transparent">
          <h2 class="accordion-header">
            <button class="accordion-button collapsed px-2 py-2 bg-white text-dark shadow-none text-decoration-none" 
                    type="button" 
                    data-bs-toggle="collapse" 
                    data-bs-target="#categoriesCollapse">
                {{!-- <i class="bi bi-collection me-3 text-primary"></i> --}}
              <span>Categories</span>
              <i class="bi bi-chevron-down ms-auto transition-all"></i>
            </button>
          </h2>
          <div id="categoriesCollapse" class="accordion-collapse collapse" data-bs-parent="#categoriesAccordion">
            <div class="accordion-body p-0 pt-2">
              <!-- Dynamic Categories -->
              <div id="dynamic-categories">
                <!-- Categories will be rendered here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </li>

    <!-- New Category -->
    <li class="nav-item mb-2">
      <a href="/new-category" class="nav-link px-2 py-2 rounded-3 d-flex align-items-center text-decoration-none">
        {{!-- <i class="bi bi-plus-circle me-3 text-primary"></i> --}}
        <span>New Category</span>
      </a>
    </li>

    <!-- Users -->
    <li class="nav-item mb-2">
      <a href="/users" class="nav-link px-2 py-2 rounded-3 d-flex text-decoration-none">
        {{!-- <i class="bi bi-people me-3 text-primary"></i> --}}
        <span>User Management</span>
      </a>
    </li>

    <!-- Settings -->
    <li class="nav-item mb-2">
      <a href="/settings" class="nav-link px-2 py-2 rounded-3 d-flex text-decoration-none">
        {{!-- <i class="bi bi-gear me-3 text-primary"></i> --}}
        <span>System Settings</span>
      </a>
    </li>
  </ul>

  <!-- Sidebar Footer -->
  <div class="sidebar-footer p-4 border-top">
    <a href="#" id="logoutBtn" class="btn btn-outline-primary w-100 d-flex align-items-center justify-content-center text-decoration-none">
      <i class="bi bi-box-arrow-right me-2"></i> Sign Out
    </a>
  </div>
</div>

<!-- CSS to ensure no underlines appear on hover/active -->
<style>
  .sidebar a,
  .sidebar button {
    text-decoration: none !important;
  }
  
  .sidebar {
    width: 260px;
    height: 100vh;
    position: fixed;
  }
  
  .nav-link:hover {
    background: rgba(13, 110, 253, 0.05);
  }
  
  .nav-link.active {
    background: rgba(13, 110, 253, 0.1);
    border-left: 3px solid var(--bs-primary);
    color: var(--bs-primary);
  }
  
  .accordion-button:not(.collapsed) {
    background: rgba(13, 110, 253, 0.05);
    color: var(--bs-primary);
  }
  
  .accordion-button:not(.collapsed) .bi-chevron-down,
  .submenu-toggle[aria-expanded="true"] .bi-chevron-down {
    transform: rotate(180deg);
  }
  
  .submenu-item a:not(.submenu-toggle):hover {
    background: rgba(13, 110, 253, 0.05);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Fetch categories and their sections from the backend
    const fetchCategories = async () => {
      try {
        const response = await fetch('https://airbrush-admin-backend.onrender.com/api/content', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch categories');
        }
        
        const data = await response.json();
        console.log('Fetched categories:', data);
        
        // Group content by category
        const categories = {};
        console.log(data, 'data');
        data.forEach(item => {
          // Skip items without required properties
          if (!item || !item.section || !item.section.category) {
            console.warn('Skipping item with missing properties:', item);
            return;
          }

          if(item.section.length > 0){
            console.log('item.section:', item.section);
            
          }
          
          const categoryName = item.section.category.name;
          const categorySlug = item.section.category.slug;
          const categoryId = item.section.category._id;
          
          if (!categories[categoryName]) {
            categories[categoryName] = {
              id: categoryId, // Add prefix to make it a valid CSS selector
              name: categoryName,
              sections: []
            };
          }
          
          // Add section to category if it doesn't exist
          const sectionExists = categories[categoryName].sections.some(
            section => section.href === `/${item.section.slug}`
          );
          
          if (!sectionExists) {
            categories[categoryName].sections.push({
              name: item.section.name,
              href: `/${item.section.slug}`,
              contentId: item._id
            });
          }
        });
        
        // Convert to array and sort sections
        const categoriesArray = Object.values(categories).map(category => ({
          ...category,
          sections: category.sections.sort((a, b) => {
            // Define the order of sections
            const order = ['hero-section', 'image-gallery', 'why-use-tool', 'text-to-anything', 'blogs'];
            
            // Get the section names without the path
            const aSection = a.href.replace('/', '');
            const bSection = b.href.replace('/', '');
            
            // Find the index of each section in the order array
            const aIndex = order.indexOf(aSection);
            const bIndex = order.indexOf(bSection);
            
            // If both sections are in the order array, sort by their position
            if (aIndex !== -1 && bIndex !== -1) {
              return aIndex - bIndex;
            }
            
            // If only one section is in the order array, prioritize it
            if (aIndex !== -1) return -1;
            if (bIndex !== -1) return 1;
            
            // If neither section is in the order array, maintain original order
            return 0;
          })
        }));
        
        return categoriesArray;
      } catch (error) {
        console.error('Error fetching categories:', error);
        return [];
      }
    };
    
    // Render categories to the sidebar
    const renderCategories = async () => {
      const dynamicCategoriesContainer = document.getElementById('dynamic-categories');
      if (!dynamicCategoriesContainer) return;
      
      // Clear the container
      dynamicCategoriesContainer.innerHTML = '';
      
      // Fetch categories from backend
      const categories = await fetchCategories();
      
      // Add each category
      categories.forEach(category => {
        // Remove default open state
        const categoryHTML = `
          <div class="submenu-item mb-2">
            <a class="d-flex align-items-center px-3 py-1 text-dark rounded-3 submenu-toggle text-decoration-none" 
               data-bs-toggle="collapse"
               href="#${category.id}">
              <span>${category.name}</span>
              <i class="bi bi-chevron-down ms-auto transition-all"></i>
            </a>
            <div class="collapse ps-4" id="${category.id}">
              <ul class="list-unstyled mt-2">
                ${category.sections.map((section, index) => {
                  // Map section names to the correct slug
                  let sectionSlug = section.href.replace('/', '');                  // Override with specific slugs for certain sections
                  if (section.name.includes('Images Gallery')) {
                    sectionSlug = 'images-gallery';
                  } else if (section.name.includes('Text to')) {
                    sectionSlug = 'text-to-anything';
                  } else if (section.name.includes('Why use') || (section.name.includes('Why-use'))) {
                    sectionSlug = 'why-use-tool';
                  } else if (section.name.includes('Blog')) {
                    sectionSlug = 'blogs';
                  }
                  
                  // Add the content ID as a query parameter
                  const href = `/${sectionSlug}?id=${section.contentId}&category=${category.name.toLowerCase().replace(/\s+/g, '-')}`;
                  
                  return `<li><a href="${href}" class="d-block px-3 py-1 rounded-3 text-decoration-none">${section.name}</a></li>`;
                }).join('')}
                ${!category.sections.some(section => section.name.includes('Hero Section')) ? 
                  `<li><a href="/hero-section?categoryId=${category.id}" class="d-block px-3 py-1 rounded-3 text-decoration-none">Hero Section</a></li>` 
                  : ''}
                ${!category.sections.some(section => section.name.includes('Images Gallery')) ? 
                  `<li><a href="/images-gallery?categoryId=${category.id}" class="d-block px-3 py-1 rounded-3 text-decoration-none">Images Gallery</a></li>` 
                  : ''}
                ${!category.sections.some(section => section.name.includes('Blog')) ? 
                  `<li><a href="/blogs?categoryId=${category.id}" class="d-block px-3 py-1 rounded-3 text-decoration-none">Blogs</a></li>` 
                  : ''}
                ${!category.sections.some(section => section.name.includes('Text to')) ? 
                  `<li><a href="/text-to-anything?categoryId=${category.id}" class="d-block px-3 py-1 rounded-3 text-decoration-none">Text to anything</a></li>` 
                  : ''}
                ${!category.sections.some(section => section.name.includes('Why Use')) ? 
                  `<li><a href="/why-use-tool?categoryId=${category.id}" class="d-block px-3 py-1 rounded-3 text-decoration-none">Why use tool</a></li>` 
                  : ''}
                <li><a href="/edit-category?id=${category.id}" class="d-block px-3 py-1 rounded-3 text-decoration-none">Edit Category</a></li>
              </ul>
            </div>
          </div>
        `;
        
        dynamicCategoriesContainer.innerHTML += categoryHTML;
      });
      
      // Set up collapse toggle event listeners
      document.querySelectorAll('.submenu-toggle').forEach(toggle => {
        toggle.addEventListener('click', function() {
          const chevron = this.querySelector('.bi-chevron-down');
          const target = document.querySelector(this.getAttribute('href'));
          
          // Toggle rotation based on target's expanded state
          if (target) {
            setTimeout(() => {
              const isExpanded = target.classList.contains('show');
              chevron.style.transform = isExpanded ? 'rotate(180deg)' : 'rotate(0)';
            }, 50);
          }
        });
      });
    };
    
    // Initialize the sidebar
    renderCategories();
  });

  document.getElementById('logoutBtn').addEventListener('click', function(e) {
    e.preventDefault();
    
    // Clear the auth cookie
    document.cookie = 'authToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
    
    // Redirect to login page
    window.location.href = '/admin/login/secret';
  });
</script>